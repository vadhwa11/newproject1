package com.asha.icgweb.controller;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.asha.icgweb.service.MasterService;
import com.asha.icgweb.utils.HMSUtil;
import com.asha.icgweb.utils.RestUtils;

import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.column.Columns;
import net.sf.dynamicreports.report.builder.component.Components;
import net.sf.dynamicreports.report.builder.datatype.DataTypes;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;
import net.sf.dynamicreports.report.exception.DRException;

/**
 * @version 1.0 Master Module
 * @author rajdeo.kumar
 *
 */
@RequestMapping("/v0.1/master")
@RestController
@CrossOrigin
public class MasterWebController {
	@Autowired
	MasterService masterService;
	
	
	
	
	/**************************************Command Master**************************************************/
	/**
	 * @param CommandMaster
	 * @param request
	 * @param response
	 * @return
	 */
	
	@RequestMapping(value="/masterModule", method=RequestMethod.GET)	
	public ModelAndView masterModules(HttpServletRequest request, HttpServletResponse response) {
		System.out.println("masterModules calling...");
		ModelAndView mav = new ModelAndView("masterModule");			
		return mav;
			
	}
	
	@RequestMapping(value="/commandMaster", method=RequestMethod.GET)	
	public ModelAndView commandMaster(HttpServletRequest request, HttpServletResponse response) {
		System.out.println("commandMaster calling...");
		ModelAndView mav = new ModelAndView("commandMaster");			
		return mav;
			
	}
	
	@RequestMapping(value="/getAllCommandDetails", method=RequestMethod.POST)	
	public String  getAllCommandDetails(@RequestBody String cmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String commandDetails="";		
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String osbURL = HMSUtil.getProperties("urlextension.properties", "getAllCommand");		
		commandDetails = RestUtils.postWithHeaders(osbURL, requestHeaders, cmdPayload);
		return commandDetails;
	}
	
	@RequestMapping(value="/getCommandTypeList", method=RequestMethod.POST)
	public String getCommandTypeList(@RequestBody String payload, 
			HttpServletRequest request, HttpServletResponse response) {
		String cmdTypeList="";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getCommandTypeList");
		cmdTypeList = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return cmdTypeList;
		
	}
	
	@RequestMapping(value="/addCommand", method=RequestMethod.POST)
	public String addCommand(@RequestBody Map<String, Object> requestPayload, HttpServletRequest request,
			HttpServletResponse response) {
		String osbURL="";				
		ModelAndView mav = new ModelAndView("showCommand");		
		String responseObj = "";		
		JSONObject jsonObject = new JSONObject(requestPayload);			
		osbURL = HMSUtil.getProperties("urlextension.properties", "addCommand");				
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		responseObj = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());	
		return responseObj;
	}
	@RequestMapping(value="/updateCommandDetails", method=RequestMethod.POST)
	public String updateCommandDetails(@RequestBody String updateCmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String responseObj="";
		String osbURL="";
		System.out.println("updateCommandDetails");
		JSONObject jsonObject = new JSONObject(updateCmdPayload);	
		System.out.println("updatecmd :: "+jsonObject);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		
		osbURL = HMSUtil.getProperties("urlextension.properties", "updateCommand");
		
		responseObj = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());
		System.out.println("updateCmd ::"+responseObj);
		return responseObj;
	}
	
	@RequestMapping(value="/updateCommandStatus", method=RequestMethod.POST)
	public String updateCommandStatus(@RequestBody String activeStatusCmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String activeCmdStatus="";
		String restURL="";
		String osbURL="";
		System.out.println("commandStatus");
		JSONObject jsonObject = new JSONObject(activeStatusCmdPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		
		osbURL = HMSUtil.getProperties("urlextension.properties", "statusCommand");
		
		activeCmdStatus = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());
		System.out.println("activeCmdStatus :: "+activeCmdStatus);
		return activeCmdStatus;
	}
	
	/**************************************MAS UNIT**************************************************/
	/**
	 * @param Unit Master
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/unitMaster", method=RequestMethod.GET)
	public ModelAndView unitMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("unitMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addUnit", method=RequestMethod.POST)
	public String addUnitMaster(@RequestBody Map<String, Object> payload, HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("unitMaster");
		String addUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		System.out.println("add Unit json :: "+jsonObject);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addUnit");
		addUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addUnit;
	}
	
	@RequestMapping(value="/getCmdList", method=RequestMethod.POST)
	public String getCommandList(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String cmdList = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getCommandList");
		cmdList = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return cmdList;
	}
	
	@RequestMapping(value="/getUnitTypeList", method=RequestMethod.POST)
	public String getUnitTypeList(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String uType="";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getUnitTypeList");
		uType = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());	
		return uType;
	}
	
	
	
	@RequestMapping(value="/getAllUnit", method=RequestMethod.POST)
	public String getAllUnit(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String allUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllUnit");
		allUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allUnit;
	}
	
	@RequestMapping(value="/updateUnit", method=RequestMethod.POST)
	public String updateUnit(@RequestBody HashMap<String, Object> payload, HttpServletRequest request, HttpServletResponse response) {
		String updatedUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateUnit");
		updatedUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updatedUnit;
	}
		
	
	@RequestMapping(value="/updateUnitStatus", method=RequestMethod.POST)
	public String updateUnitStatus(@RequestBody String payload, 
			HttpServletRequest request, HttpServletResponse response) {
		String updUnitStatus="";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateUnitStatus");
		updUnitStatus = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updUnitStatus;
		
	}
	/***********************************IDEAL WEIGHT**************************************************/
	@RequestMapping(value="/idealWeightMaster", method=RequestMethod.GET)
	public ModelAndView idealWeightMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("idealWeightMaster");		
		return mav;
	}
	
	@RequestMapping(value="/getAgeList", method=RequestMethod.POST)
	public String getAgeList(@RequestBody Map<String, Object> idealWeight, HttpServletRequest request, HttpServletResponse response) {
		JSONObject jsonObject = new JSONObject(idealWeight);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAge");
		return RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
	}
	
	@RequestMapping(value="/addIdealWeightMaster", method=RequestMethod.POST)
	public String addIdealWeightMaster(@RequestBody Map<String, Object> idealWeight, HttpServletRequest request, HttpServletResponse response) {
		String addEmpanelled="";	
		JSONObject jsonObject = new JSONObject(idealWeight);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addIdealWeightMaster");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addDepartment");
		addEmpanelled = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addEmpanelled;
	}
	
	@RequestMapping(value="/getAllIdealWeight", method=RequestMethod.POST)
	public String getAllIdealWeight(@RequestBody String empnelledHospital, HttpServletRequest request, HttpServletResponse response) {
		String allIdealWeight="";
		JSONObject jsonObject = new JSONObject(empnelledHospital);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllIdealWeight");		
		allIdealWeight = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allIdealWeight;		
	}
	
	@RequestMapping(value="/updateIdealWeight", method=RequestMethod.POST)
	public String updateIdealWeight(@RequestBody String empnelledHospital, HttpServletRequest request, HttpServletResponse response) {
		String updateIdealWeight="";
		JSONObject jsonObject = new JSONObject(empnelledHospital);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateIdealWeight");
		updateIdealWeight = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateIdealWeight;		
	}
	
	/******************************************MAS HOSPITAL*****************************************************************/
	/**
	 * @param Mas Hospital
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/hospitalMaster", method=RequestMethod.GET)
	public ModelAndView hospitalMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("hospitalMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addHospital", method=RequestMethod.POST)
	public String addHospital(@RequestBody Map<String, Object> requestPayload, HttpServletRequest request, HttpServletResponse response) {
		String addHosp="";	
		JSONObject jsonObject = new JSONObject(requestPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addMasHospital");
		addHosp = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addHosp;
	}
	
	@RequestMapping(value="/getUnitNameList", method=RequestMethod.POST)
	public String getUnitNameList(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String unitNameList="";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getUnitNameList");
		unitNameList = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return unitNameList;
		
	}
	
	@RequestMapping(value="/getAllHospital", method=RequestMethod.POST)
	public String getAllHospital(@RequestBody String hospitalPayload, HttpServletRequest request, HttpServletResponse response) {
		String allHospital="";
		JSONObject jsonObject = new JSONObject(hospitalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllHospital");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllHospital");
		allHospital = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allHospital;
		
	}
	
	@RequestMapping(value="/updateMasHospitalDetails", method=RequestMethod.POST)
	public String updateMasHospitalDetails(@RequestBody String hospitalPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateHospital="";
		JSONObject jsonObject = new JSONObject(hospitalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateHospitalDetails");
		updateHospital = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateHospital;
		
	}
	@RequestMapping(value="/updateMasHospitalStatus", method=RequestMethod.POST)
	public String updateMasHospitalStatus(@RequestBody String hospitalPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateHospitalStat="";
		JSONObject jsonObject = new JSONObject(hospitalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateHospitalMasterStatus");
		updateHospitalStat = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateHospitalStat;
		
	}
	
	@RequestMapping(value="/generateHospitalReport", method=RequestMethod.GET)
	public String generateHospitalReport(HttpServletRequest request, HttpServletResponse response) {
		System.out.println("generate Report controller");
		Connection connection = null;
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521/XE","icg", "icg");
		String query = "select h.HOSPITAL_CODE, h.HOSPITAL_NAME, u.UNIT_NAME, h.STATUS "
				+ "from MAS_HOSPITAL h "
				+ "left join MAS_UNIT u on h.unit_id=u.UNIT_ID "
				+ "left join MAS_COMMAND c on h.command_id=c.COMMAND_ID";
		JasperReportBuilder report = DynamicReports.report();
		report.columns(Columns.column("Hospaital Code", "hospital_Code", DataTypes.stringType()),
						Columns.column("Hospital Name", "hospital_Name", DataTypes.stringType()),
						Columns.column("Unit Name", "unit_Name", DataTypes.stringType()),
						Columns.column("Status", "status", DataTypes.stringType()))
		.title(//title of the report
			      Components.text("Hospital Master")
				  .setHorizontalAlignment(HorizontalAlignment.CENTER))
				  .pageFooter(Components.pageXofY())//show page number on the page footerrin
				  .setDataSource(query,connection);
		try {
            //show the report
			report.show();		            
			report.toPdf(new FileOutputStream("D:/ICG/Reports/Hospital_Master_report_1.jrxml"));
		} catch (DRException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		//ModelAndView mav = new ModelAndView("generateHospitalReport");		
		return "Hospital_Master_report_1";
	}
	
	/***************************************MAS RELATION*****************************************************/
	@RequestMapping(value="/relationMaster", method=RequestMethod.GET)
	public ModelAndView relationMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("relationMaster");		
		return mav;
	}
	
	@RequestMapping(value="/getAllRelation", method=RequestMethod.POST)
	public String getAllRelation(@RequestBody String relationPayload, HttpServletRequest request, HttpServletResponse response) {
		String allRelation="";
		JSONObject jsonObject = new JSONObject(relationPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllRelation");
		allRelation = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allRelation;
		
	}
	
	@RequestMapping(value="/updateRelationDetails", method=RequestMethod.POST)
	public String updateRelationDetails(@RequestBody String relationPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateRel="";
		JSONObject jsonObject = new JSONObject(relationPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateRelationDetails");
		updateRel = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateRel;
		
	}
	@RequestMapping(value="/updateRelationStatus", method=RequestMethod.POST)
	public String updateRelationStatus(@RequestBody String relationPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateRelStat="";
		JSONObject jsonObject = new JSONObject(relationPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateRelationStatus");
		updateRelStat = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateRelStat;
		
	}
	@RequestMapping(value="/addRelation", method=RequestMethod.POST)
	public String addRelation(@RequestBody Map<String, Object> requestPayload, HttpServletRequest request, HttpServletResponse response) {
		String addRel="";	
		JSONObject jsonObject = new JSONObject(requestPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addRelation");		
		addRel = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addRel;
	}
	
	/*********************************MAS DISPOSAL*************************************************/
	@RequestMapping(value="/disposalMaster", method=RequestMethod.GET)
	public ModelAndView disposalMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("disposalMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addDisposal", method=RequestMethod.POST)
	public String addDisposal(@RequestBody Map<String, Object> disposalPayload, HttpServletRequest request, HttpServletResponse response) {
		String addDispo="";	
		JSONObject jsonObject = new JSONObject(disposalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "addDisposal");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addDisposal");
		addDispo = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return addDispo;
	}
	
	@RequestMapping(value="/getAllDisposal", method=RequestMethod.POST)
	public String getAllDisposal(@RequestBody String disposalPayload, HttpServletRequest request, HttpServletResponse response) {
		String allRelation="";
		JSONObject jsonObject = new JSONObject(disposalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "getAllDisposal");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllDisposal");
		allRelation = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return allRelation;		
	}
	
	@RequestMapping(value="/updateDisposalDetails", method=RequestMethod.POST)
	public String updateDisposalDetails(@RequestBody String disposalPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateDispo="";
		JSONObject jsonObject = new JSONObject(disposalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateDisposalDetails");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDisposalDetails");
		updateDispo = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateDispo;		
	}
	
	@RequestMapping(value="/updateDisposalStatus", method=RequestMethod.POST)
	public String updateDisposalStatus(@RequestBody String disposalPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateDispoStat="";
		JSONObject jsonObject = new JSONObject(disposalPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateDisposalStatus");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDisposalStatus");
		updateDispoStat = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateDispoStat;		
	}
	/***************************MAS APPOINTMENT TYPE****************************************************/
	@RequestMapping(value="/appointmentTypeMaster", method=RequestMethod.GET)
	public ModelAndView appointmentTypeMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("appointmentTypeMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addAppointmentType", method=RequestMethod.POST)
	public String addAppointmentType(@RequestBody Map<String, Object> appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String addAppoint="";	
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "addAppointmentType");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addAppointmentType");
		addAppoint = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return addAppoint;
	}
	
	@RequestMapping(value="/getAllAppointmentType", method=RequestMethod.POST)
	public String getAllAppointmentType(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String allAppointment="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "getAllAppointmentType");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllAppointmentType");
		allAppointment = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return allAppointment;		
	}
	
	@RequestMapping(value="/updateAppointmentTypeDetails", method=RequestMethod.POST)
	public String updateAppointmentTypeDetails(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateAppoint="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateAppointTypeDetails");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateAppointTypeDetails");
		updateAppoint = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateAppoint;		
	}
	
	@RequestMapping(value="/updateAppointmentTypeStatus", method=RequestMethod.POST)
	public String updateAppointmentTypeStatus(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateAppointStat="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateAppointStatus");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateAppointStatus");
		updateAppointStat = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateAppointStat;		
	}
	
	/*********************************MAS FREQUENCY******************************************************/
	@RequestMapping(value="/frequencyMaster", method=RequestMethod.GET)
	public ModelAndView frequencyMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("frequencyMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addOpdFrequency", method=RequestMethod.POST)
	public String addOpdFrequency(@RequestBody Map<String, Object> appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String addFreq="";	
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "addOpdFrequency");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addOpdFrequency");
		addFreq = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return addFreq;
	}
	
	@RequestMapping(value="/getAllOpdFrequency", method=RequestMethod.POST)
	public String getAllOpdFrequency(@RequestBody String departTypePayload, HttpServletRequest request, HttpServletResponse response) {
		String allFreq="";
		JSONObject jsonObject = new JSONObject(departTypePayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "getAllOpdFrequency");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllOpdFrequency");
		allFreq = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return allFreq;		
	}
	
	@RequestMapping(value="/updateOpdFrequencyDetails", method=RequestMethod.POST)
	public String updateOpdFrequencyDetails(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateFreq="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateOpdFrequencyDetails");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateOpdFrequencyDetails");
		updateFreq = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateFreq;		
	}
	
	@RequestMapping(value="/updateOpdFrequencyStatus", method=RequestMethod.POST)
	public String updateOpdFrequencyStatus(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateFreqStat="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateOpdFrequencyStatus");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateOpdFrequencyStatus");
		updateFreqStat = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateFreqStat;		
	}
	
	/******************************** MAS Empanelled Hospital Master***************************************/
	@RequestMapping(value="/empanelledHospitalMaster", method=RequestMethod.GET)
	public ModelAndView empanelledHospitalMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("empanelledHospitalMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addEmpanelledHospital", method=RequestMethod.POST)
	public String addEmpanelledHospital(@RequestBody Map<String, Object> empnelledHospital, HttpServletRequest request, HttpServletResponse response) {
		String addEmpanelled="";	
		JSONObject jsonObject = new JSONObject(empnelledHospital);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addEmpanelledHospital");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addDepartment");
		addEmpanelled = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addEmpanelled;
	}
	
	@RequestMapping(value="/getAllEmpanelledHospital", method=RequestMethod.POST)
	public String getAllEmpanelledHospital(@RequestBody String empnelledHospital, HttpServletRequest request, HttpServletResponse response) {
		String allEmpanelled="";
		JSONObject jsonObject = new JSONObject(empnelledHospital);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllEmpanelledHospital");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllDepartment");
		allEmpanelled = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allEmpanelled;		
	}
	
	@RequestMapping(value="/updateEmpanelledHospital", method=RequestMethod.POST)
	public String updateEmpanelledHospital(@RequestBody String empnelledHospital, HttpServletRequest request, HttpServletResponse response) {
		String updateEmpnelledHospital="";
		JSONObject jsonObject = new JSONObject(empnelledHospital);
		System.out.println("jsonObject client :: "+jsonObject);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updateEmpanelledHospital");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDepartmentDetails");
		updateEmpnelledHospital = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateEmpnelledHospital;		
	}
	
	
	
	/************************************ MAS DEPARTMENT *******************************************************/
	@RequestMapping(value="/departmentMaster", method=RequestMethod.GET)
	public ModelAndView departmentMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("departmentMaster");		
		return mav;
	}
	
	@RequestMapping(value="/getDepartmentTypeList", method=RequestMethod.POST)
	public String getDepartmentTypeList(@RequestBody String departTypePayload, HttpServletRequest request, HttpServletResponse response) {
		String departType="";
		JSONObject jsonObject = new JSONObject(departTypePayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getDepartmentTypeList");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getDepartmentTypeList");
		departType = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return departType;		
	}
	
	@RequestMapping(value="/addDepartment", method=RequestMethod.POST)
	public String addDepartment(@RequestBody Map<String, Object> appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String addDipart="";	
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addDepartment");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_addDepartment");
		addDipart = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addDipart;
	}
	
	@RequestMapping(value="/getAllDepartment", method=RequestMethod.POST)
	public String getAllDepartment(@RequestBody String departTypePayload, HttpServletRequest request, HttpServletResponse response) {
		String departType="";
		JSONObject jsonObject = new JSONObject(departTypePayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "getAllDepartment");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_getAllDepartment");
		departType = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return departType;		
	}
	
	@RequestMapping(value="/updateDepartmentDetails", method=RequestMethod.POST)
	public String updateDepartmentDetails(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateDept="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateDepartmentDetails");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDepartmentDetails");
		updateDept = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateDept;		
	}
	
	@RequestMapping(value="/updateDepartmentStatus", method=RequestMethod.POST)
	public String updateDepartmentStatus(@RequestBody String appointmentPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateDeptStat="";
		JSONObject jsonObject = new JSONObject(appointmentPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		//String restURL = HMSUtil.getProperties("urlextension.properties", "updateDepartmentStatus");
		String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDepartmentStatus");
		updateDeptStat = RestUtils.postWithHeaders(OSBURL, requestHeaders, jsonObject.toString());
		return updateDeptStat;		
	}
	
	/******************************************phsiotherapy TYPE MASTER*****************************************************************/
	/**
	 * @Author Anita
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/physiotherapyMaster", method=RequestMethod.GET)
	public ModelAndView phsiotherapyMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("phsiotherapyMaster");		
		return mav;
	}
	
	
	@RequestMapping(value="/getAllPhysiotherapy", method=RequestMethod.POST)
	public String getAllPhysiotherapy(@RequestBody String physiotherapyPayload, HttpServletRequest request, HttpServletResponse response) {
		String allphysiotherapyList="";
		JSONObject jsonObject = new JSONObject(physiotherapyPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "getAllPhysiotherapy");
		allphysiotherapyList = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allphysiotherapyList;
		
	}
	
	@RequestMapping(value="/addPhsiotherapy", method=RequestMethod.POST)
	public String addPhsiotherapy(@RequestBody Map<String, Object> requestPayload, HttpServletRequest request, HttpServletResponse response) {
		String addPhsiotherapyResponse="";	
		JSONObject jsonObject = new JSONObject(requestPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "addPhsiotherapyCare");
		addPhsiotherapyResponse = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return addPhsiotherapyResponse;
	}
	
	@RequestMapping(value="/updatePhsiotherapyDetails", method=RequestMethod.POST)
	public String updatePhsiotherapyDetails(@RequestBody String masNursingCare, HttpServletRequest request, HttpServletResponse response) {
		String updateEmpnelledHospital="";
		JSONObject jsonObject = new JSONObject(masNursingCare);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = HMSUtil.getProperties("urlextension.properties", "updatePhysiotherapyDetails");
		//String OSBURL = HMSUtil.getProperties("urlextension.properties", "osb_updateDepartmentDetails");
		updateEmpnelledHospital = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updateEmpnelledHospital;		
	}
	
	/***************************************** ICD *********************************************************/
	
	@RequestMapping(value="/ICDMaster", method=RequestMethod.GET)
	public ModelAndView ICDMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("ICDMaster");		
		return mav;
	}
}
