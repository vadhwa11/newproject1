package com.asha.icgweb.service.impl;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.asha.icgweb.dao.FileUploadDAO;
import com.asha.icgweb.entity.Patient;
import com.asha.icgweb.entity.UploadDocument;
import com.asha.icgweb.service.RegistrationService;
import com.asha.icgweb.utils.HMSUtil;
import com.asha.icgweb.utils.RestUtils;

@Repository
public class RegistrationServiceImpl implements RegistrationService {
	
	
	@Autowired
	FileUploadDAO fileUploadDao;

	String IpAndPortNo=HMSUtil.getProperties("urlextension.properties","OSB_IP_AND_PORT");
	
	
	@Override
	public String getDepartmentBloodGroupAndMedicalCategory(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","DEPT_BlOOD_MEDICAL_CAT");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(), requestHeaders, data);
		
	}

	
	@Override
	public String getEmployeeAndDependentData(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","PATIEN_DETAILS");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}

	
	@Override
	public String getTokenNoForDepartmentMultiVisit(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","TOKEN_FOR_MULTI_VISIT");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String submitPatientDetails(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","SUBMIT_PATIENT_DETAILS");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String showRegistrationAndAppointmentOthers(String data, HttpServletRequest request,
			HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","APPOINTMENT_FOR_OTHERS");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String getTokenNoOfDepartmentForOthers(String data, HttpServletRequest request,
			HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","TOKEN_FOR_OTHERS");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String submitPatientDetailsForOthers(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","SUBMIT_OTHERS_PATIENTS_DATA");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String searchOthersRegisteredPatient(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","SEARCH_FOR_REGISTERED_PATIENT");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}


	@Override
	public String getPatientListFromServiceNo(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties","PATIENT_LIST_FOR_UPLOAD_DOCUMENT");
		String OSBURL = IpAndPortNo + Url;
		return RestUtils.postWithHeaders(OSBURL.trim(),requestHeaders, data);
	}
	
	@Override
	public String getAppointmentTypeList(String data, HttpServletRequest request, HttpServletResponse response) {
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String Url = HMSUtil.getProperties("urlextension.properties", "getAppointmentTypeList");
		String OSBURL = IpAndPortNo + Url;		
		return RestUtils.postWithHeaders(OSBURL.trim(), requestHeaders, data);
	}

	@SuppressWarnings("unchecked")
	@Override
	public String uploadDocumentForPatient(HttpServletRequest request,
            @RequestParam CommonsMultipartFile[] fileUpload) throws Exception{
		Map<String,Object> map = new HashMap<String, Object>();
		JSONObject json = new JSONObject();
		long patientId=0;
		String remarks="";
		
		if(!request.getParameter("patientName").isEmpty()) {
			patientId = Long.parseLong(request.getParameter("patientName"));
		}
		
		if(!request.getParameter("remarks").isEmpty()) {
			remarks = request.getParameter("remarks");
		}
		
	    if (fileUpload != null && fileUpload.length > 0) {
            for (CommonsMultipartFile aFile : fileUpload){
                  
                System.out.println("Saving file: " + aFile.getOriginalFilename());
                 
                UploadDocument uploadFile = new UploadDocument();
                uploadFile.setFileName(aFile.getOriginalFilename());
                uploadFile.setFileData(aFile.getBytes());
                
                Patient patient = new Patient();
                patient.setPatientId(patientId);
                uploadFile.setPatient(patient);
                
                uploadFile.setRemarks(remarks);
                
                map= fileUploadDao.save(uploadFile); 
                json.put("data",map);
            }
        }
        return json.toString();
		
	}


	@Override
	@SuppressWarnings("unchecked")
	public String getDocumentListForPatient(String data, HttpServletRequest request, HttpServletResponse response) {
		Map<String,Object> map = new HashMap<String, Object>();
		JSONObject json = new JSONObject();
		List<HashMap<String,Object>> docListObj = new ArrayList<HashMap<String,Object>>();
		JSONObject jsonObj = new JSONObject(data);
		long patientId = jsonObj.getLong("patientId");
		
		map =fileUploadDao.showUploadedDocumentsForPatient(patientId);
		List<UploadDocument> docList = (List<UploadDocument>) map.get("documentList");
		if(docList!=null &&  docList.size()>0 ) {
			for (UploadDocument list : docList) {
				HashMap<String, Object> mapDoc = new HashMap<String, Object>();
				mapDoc.put("Id",list.getFileId());
				mapDoc.put("fileName",list.getFileName());
				mapDoc.put("remarks",list.getRemarks());
				docListObj.add(mapDoc);
			}
			if (docListObj != null && docListObj.size() > 0) {
				json.put("data", docListObj);
				json.put("status", 1);
			} else {
				json.put("data", docListObj);
				json.put("msg", "Data not found");
				json.put("status", 0);
			}
			
		}
		return json.toString();
	}


	@SuppressWarnings("deprecation")
	@Override
	public String viewUploadDocuments(String data, HttpServletRequest request, HttpServletResponse response) throws SQLException {
		List<UploadDocument> uploadDocuments = new ArrayList<UploadDocument>();
		long documentId=0;
		if(Long.parseLong(request.getParameter("fileId"))!=0) {
			documentId=Long.parseLong(request.getParameter("fileId"));
		}
		
		uploadDocuments = fileUploadDao.viewUploadDocuments(documentId);
		String filename =uploadDocuments.get(0).getFileName();
		
		try {
			response.setContentType( "application/octet-stream" );
			response.setHeader ("Content-Disposition", "attachment;filename="+java.net.URLEncoder.encode(filename)+"");
			   for(UploadDocument doc: uploadDocuments)
			   {
				  
				   byte[] bytes = doc.getFileData();
				   Blob blob = new javax.sql.rowset.serial.SerialBlob(bytes);
				   InputStream in = blob.getBinaryStream();
				   response.getOutputStream().flush();
				   ServletOutputStream outs = response.getOutputStream();
				   // Create the byte array to hold the data
	    	     int offset = 0;
	    	     int numRead = 0;
	    	     while (offset < bytes.length
	    	    		 && (numRead=in.read(bytes, offset, bytes.length-offset)) >= 0) {
	    	    	 offset += numRead;
	    	     }
	    
	    	     if (offset < bytes.length) {
	    	     }
	    	     outs.write(bytes);
	    	     in.close();
		   } 
			
		} catch (IOException ioe) {
 		   ioe.printStackTrace();
 	   }
		
		
		return "success";
	}


	

	

	

}
