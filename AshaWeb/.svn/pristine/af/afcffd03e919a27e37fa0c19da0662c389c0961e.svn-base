package com.asha.icgweb.controller;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.asha.icgweb.service.MasterService;
import com.asha.icgweb.utils.HMSUtil;
import com.asha.icgweb.utils.RestUtils;
import com.asha.icgweb.utils.URLExtension;

/**
 * @version 1.0 Master Module
 * @author rajdeo.kumar
 *
 */
@RequestMapping("/v0.1/master")
@RestController
@CrossOrigin
public class MasterWebController {
	@Autowired
	MasterService masterService;
	
	
	
	/**
	 * @param TradeMaster
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/tradeMaster", method=RequestMethod.GET)
	public ModelAndView tradeMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("tradeMaster");
		System.out.println("tradeMaster page...");
		return mav;
	}
	
	@RequestMapping(value="/getTradeDetails", method=RequestMethod.POST)
	public String getTradeDetails(@RequestBody String tradeDetailsPayload, HttpServletRequest request, HttpServletResponse response) {
		String tradeDetails="";
		tradeDetails = masterService.getTradeDetails(tradeDetailsPayload, request, response);
		System.out.println("tradeDetails client :: "+tradeDetails);
		return tradeDetails;
	}
	
	/**
	 * @param StateMaster
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/stateMaster", method=RequestMethod.GET)
	public ModelAndView stateMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("stateMaster");
		System.out.println("stateMaster page...");
		return mav;
	}
	/**************************************Command Master**************************************************/
	/**
	 * @param CommandMaster
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/showCommand", method=RequestMethod.GET)	
	public ModelAndView showMastersDefaultJsp(HttpServletRequest request, HttpServletResponse response) {
		System.out.println("showCommand calling...");
		ModelAndView mav = new ModelAndView("showCommand");			
		return mav;
			
	}
	
	@RequestMapping(value="/addCommandDetails", method=RequestMethod.POST)
	public ModelAndView addCommandDetails(@RequestParam Map<String, Object> requestPayload, HttpServletRequest request,
			HttpServletResponse response) {
		String osbURL="";
				
		ModelAndView mav = new ModelAndView("showCommand");
		HashMap<String, Object> map =new HashMap<String, Object>();
		String responseObj = "";		
		JSONObject jsonObject = new JSONObject(requestPayload);			
		osbURL =HMSUtil.getProperties("urlextension.properties", "addCommandDetails");				
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		responseObj = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());
		
		mav.addObject("responseObj", responseObj);
		map.put("responseObj", responseObj);
		mav.addObject("map", map);
		return mav;
	}
	
	@RequestMapping(value="/getAllCommandDetails", method=RequestMethod.POST)	
	public String  getAllCommandDetails(@RequestBody String cmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String commandDetails="";		
		String osbURL="";
		String restURL="";
		//JSONObject jsonObject = new JSONObject(cmdPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		osbURL = HMSUtil.getProperties("urlextension.properties", "getCommand");		
		commandDetails = RestUtils.postWithHeaders(osbURL, requestHeaders, cmdPayload);
		return commandDetails;
	}
	
	@RequestMapping(value="/updateCommandDetails", method=RequestMethod.POST)
	public String updateCommandDetails(@RequestBody String updateCmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String responseObj="";
		String osbURL="";
		System.out.println("updateCommandDetails");
		JSONObject jsonObject = new JSONObject(updateCmdPayload);	
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		
		osbURL = HMSUtil.getProperties("urlextension.properties", "updateCommand");
		
		responseObj = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());
		System.out.println("updateCmd ::"+responseObj);
		return responseObj;
	}
	
	@RequestMapping(value="/updateCommandStatus", method=RequestMethod.POST)
	public String updateCommandStatus(@RequestBody String activeStatusCmdPayload, HttpServletRequest request, HttpServletResponse response) {
		String activeCmdStatus="";
		String restURL="";
		String osbURL="";
		System.out.println("commandStatus");
		JSONObject jsonObject = new JSONObject(activeStatusCmdPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		
		osbURL = HMSUtil.getProperties("urlextension.properties", "statusCommand");
		
		activeCmdStatus = RestUtils.postWithHeaders(osbURL, requestHeaders, jsonObject.toString());
		System.out.println("activeCmdStatus :: "+activeCmdStatus);
		return activeCmdStatus;
	}
	
	/**************************************UOM Master**************************************************/
	
	/**
	 * @param UOMMaster
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/uomMaster", method=RequestMethod.GET)
	public ModelAndView rankMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("uomMaster");
		System.out.println("uomMaster page...");
		return mav;
	}
	
	@RequestMapping(value="/addUOM", method=RequestMethod.POST)
	public ModelAndView addUnitMasDetails(@RequestParam Map<String, Object> requestPayload, HttpServletRequest request,
			HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("uomMaster");
		String addUnitDetails="";
		JSONObject jsonObject = new JSONObject(requestPayload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restUrl = "http://localhost:8083/AshaServices/v0.1/master/addMasUOM";
		addUnitDetails = RestUtils.postWithHeaders(restUrl, requestHeaders, jsonObject.toString());
		System.out.println("addUnitDetails :: "+addUnitDetails);
		return mav;
		
		
	}
	@RequestMapping(value="/getAllUOM", method=RequestMethod.POST)
	public String getAllUOM(@RequestBody String uomPayload, HttpServletRequest request, HttpServletResponse response) {
		String allMasUnit="";
		//JSONObject jsonObject = new JSONObject(cmdPayload);
				MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();		
				String restUrl = "http://localhost:8083/AshaServices/v0.1/master/getAllUOM";
				allMasUnit = RestUtils.postWithHeaders(restUrl, requestHeaders, uomPayload);
				System.out.println("getAllMasUnit on Client:: "+allMasUnit);
		return allMasUnit;
	}
	
	@RequestMapping(value="/updateUOMDetails", method=RequestMethod.POST)
	public String updateUOMDetails(@RequestBody String updateUomPayload, HttpServletRequest request, HttpServletResponse response) {
		String updateUom ="";
		JSONObject jsonObject = new JSONObject(updateUomPayload);
		System.out.println("jsonObject :: "+jsonObject);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();		
		String restUrl = "http://localhost:8083/AshaServices/v0.1/master/updateUOMDetails";
		updateUom = RestUtils.postWithHeaders(restUrl, requestHeaders, jsonObject.toString());
		System.out.println("update on Client:: "+updateUom);
		return updateUom;
	}
	
	/*******************************MAS UNIT**********************************/
	@RequestMapping(value="/unitMaster", method=RequestMethod.GET)
	public ModelAndView unitMaster(HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("unitMaster");		
		return mav;
	}
	
	@RequestMapping(value="/addUnit", method=RequestMethod.POST)
	public ModelAndView addUnitMaster(@RequestBody Map<String, Object> payload, HttpServletRequest request, HttpServletResponse response) {
		ModelAndView mav = new ModelAndView("unitMaster");
		String addUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		System.out.println("add Unit json :: "+jsonObject);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = "http://localhost:8083/AshaServices/v0.1/master/addUnit";
		addUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return mav;
	}
	
	@RequestMapping(value="/getCmdList", method=RequestMethod.POST)
	public String getCommandList(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String cmdList = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = "http://localhost:8083/AshaServices/v0.1/master/getCommandList";
		cmdList = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return cmdList;
	}
	
	@RequestMapping(value="/getUnitTypeList", method=RequestMethod.POST)
	public String getUnitTypeList(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String uType="";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = "http://localhost:8083/AshaServices/v0.1/master/getUnitType";
		uType = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());	
		return uType;
	}
	
	
	
	@RequestMapping(value="/getAllUnit", method=RequestMethod.POST)
	public String getAllUnit(@RequestBody String payload, HttpServletRequest request, HttpServletResponse response) {
		String allUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = "http://localhost:8083/AshaServices/v0.1/master/getAllUnit";
		allUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return allUnit;
	}
	
	@RequestMapping(value="/updateUnit", method=RequestMethod.POST)
	public String updateUnit(@RequestBody HashMap<String, Object> payload, HttpServletRequest request, HttpServletResponse response) {
		String updatedUnit = "";
		JSONObject jsonObject = new JSONObject(payload);
		MultiValueMap<String,String> requestHeaders = new LinkedMultiValueMap<String, String>();
		String restURL = "http://localhost:8083/AshaServices/v0.1/master/updateUnit";
		updatedUnit = RestUtils.postWithHeaders(restURL, requestHeaders, jsonObject.toString());
		return updatedUnit;
	}
}
