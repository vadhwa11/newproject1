package com.icg.jkt.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.icg.jkt.dao.AppointmentDAO;
import com.icg.jkt.entity.AppSetup;
import com.icg.jkt.entity.MasAppointmentSession;
import com.icg.jkt.entity.MasAppointmentType;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasHospital;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.HMSUtil;

@Repository
@Transactional
public class AppointmentDAOImpl implements AppointmentDAO{

	@Autowired
	GetHibernateUtils getHibernateUtils;
	
	
	
	@Override
	public Map<String, Object> getRecordsForDoctorAppointment() {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		departmentList = getDepartmentList();
		map.put("departmentList", departmentList);
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getlocationWiseAppointmentType(long departmentId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAppointmentSession> appointmentTypeList = new ArrayList<MasAppointmentSession>();
		/* Dummy hospitalId , It will be fetch from session */
		long hospitalId=1; 
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		
		
		appointmentTypeList=session.createCriteria(MasAppointmentSession.class)
				.add(Restrictions.eq("masHospital.hospitalId", hospitalId))
				.add(Restrictions.eq("masDepartment.departmentId", departmentId))
				.list();
		map.put("appointmentTypeList", appointmentTypeList);
		return map;
	}


	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getappointmentSetupDetails(long departmentId, long appointmentTypeId) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasAppointmentSession> appointmentTypeList = new ArrayList<MasAppointmentSession>();
		List<AppSetup>appSetupList=new ArrayList<AppSetup>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		/* Dummy hospitalId , It will be fetch from session */
		long hospitalId=1; 
		 
		System.out.println("appointmentTypeId :"+appointmentTypeId);
		  appSetupList=session.createCriteria(AppSetup.class) 
				  .add(Restrictions.eq("masDepartment.departmentId", departmentId))
				  .add(Restrictions.eq("masHospital.hospitalId", hospitalId))
				  .add(Restrictions.eq("masAppointmentSession.id", appointmentTypeId)) .list();
		  
		  
		  appointmentTypeList=session.createCriteria(MasAppointmentSession.class)
					.add(Restrictions.eq("masHospital.hospitalId", hospitalId))
					.add(Restrictions.eq("masAppointmentType.appointmentTypeId", appointmentTypeId))
					.list();
		 
		  map.put("appointmentTypeList", appointmentTypeList);
		  map.put("appSetupList",appSetupList);
		
		return map;
	}

	@Override
	public AppSetup getAppSetupObject(long appointmentId) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		return (AppSetup) session.load(AppSetup.class,appointmentId);
	}

	
	@SuppressWarnings("unused")
	@Override
	public String saveAppointmentSetup(AppSetup appSetup) {
		String Result = "";
		boolean save= false;
		
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(AppSetup.class);
			Transaction tx = session.beginTransaction();
			if(appSetup.getId()!=0) {
				session.update(appSetup);
			}else {
				session.save(appSetup);
			}
			
			tx.commit();
			save = true;
			if (save) {
				Result = "200";
			} else {
				Result = "500";
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			Result = e.getMessage();
			e.printStackTrace();
		}
		 
		return Result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<MasHospital> getHospitalList() {
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		hospitalList = session.createCriteria(MasHospital.class)
				.addOrder(Order.asc("hospitalName")).list();
		return hospitalList;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<MasDepartment> getDepartmentList() {
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		String departmentTypeCode = HMSUtil.getProperties("adt.properties", "DEPARTMENT_TYPE_CODE");
		
		
		departmentList=session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("status","y").ignoreCase())
				.createAlias("masDepartmentType", "dt")
				.add(Restrictions.eq("dt.departmentTypeCode",departmentTypeCode))
				.addOrder(Order.asc("departmentName"))
				.list();
		return departmentList;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<MasAppointmentType> getAppointmentTypeList() {
		List<MasAppointmentType> appointmentTypeList = new ArrayList<MasAppointmentType>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		appointmentTypeList = session.createCriteria(MasAppointmentType.class)
				.addOrder(Order.asc("appointmentTypeName")).list();
		return appointmentTypeList;
	}

	@SuppressWarnings("unused")
	@Override
	public String submitAppointmentSession(MasAppointmentSession appointmentSession) {
		String Result = "";
		boolean save= false;
		
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(MasAppointmentSession.class);
			Transaction tx = session.beginTransaction();
			session.save(appointmentSession);
			tx.commit();
			save = true;
			if (save) {
				Result = "200";
			} else {
				Result = "500";
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			Result = e.getMessage();
			e.printStackTrace();
		}
		 
		return Result;
	}

	


	
}
