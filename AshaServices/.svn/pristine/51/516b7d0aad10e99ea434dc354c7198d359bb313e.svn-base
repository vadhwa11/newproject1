package com.icg.jkt.entity;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonBackReference;


/**
 * The persistent class for the MAS_DEPARTMENT database table.
 * 
 */
@Entity
@Table(name="MAS_DEPARTMENT")
@NamedQuery(name="MasDepartment.findAll", query="SELECT m FROM MasDepartment m")
public class MasDepartment implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@SequenceGenerator(name="MAS_DEPARTMENT_DEPARTMENTID_GENERATOR", sequenceName="MAS_DEPARTMENT_SEQ", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="MAS_DEPARTMENT_DEPARTMENTID_GENERATOR")
	@Column(name="DEPARTMENT_ID")
	private long departmentId;

	@Column(name="COST_CENTER_ID")
	private BigDecimal costCenterId;

	@Column(name="DEPARTMENT_CODE")
	private String departmentCode;

	@Column(name="DEPARTMENT_NAME")
	private String departmentName;

	@Column(name="DEPARTMENT_NO")
	private String departmentNo;

	@ManyToOne
	@JoinColumn(name="DEPARTMENT_TYPE_ID")
	private MasDepartmentType masDepartmentType;

	@Temporal(TemporalType.DATE)
	@Column(name="LAST_CHG_DATE")
	private Date lastChgDate;

	@Column(name="STATUS")
	private String status;
	
	@OneToMany(mappedBy="masDepartment")
	@JsonBackReference
	private List<Visit> visit;

	
	@OneToMany(mappedBy="masDepartment")
	@JsonBackReference
	private List<AppSetup> appSetups;
	public List<Visit> getVisit() {
		return visit;
	}

	public void setVisit(List<Visit> visit) {
		this.visit = visit;
	}

	//bi-directional many-to-one association to DoctorRoaster
	@OneToMany(mappedBy="masDepartment")
	@JsonBackReference
	private List<DoctorRoaster> doctorRoasters;

	//bi-directional many-to-one association to User
	@ManyToOne
	@JoinColumn(name="LAST_CHG_BY")
	private Users user;

	//bi-directional many-to-one association to MasEmployee
	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy="masDepartment")
	@JsonBackReference
	private List<MasEmployee> masEmployees;

	public MasDepartment() {
	}

	public long getDepartmentId() {
		return this.departmentId;
	}

	public void setDepartmentId(long departmentId) {
		this.departmentId = departmentId;
	}

	public BigDecimal getCostCenterId() {
		return this.costCenterId;
	}

	public void setCostCenterId(BigDecimal costCenterId) {
		this.costCenterId = costCenterId;
	}

	public String getDepartmentCode() {
		return this.departmentCode;
	}

	public void setDepartmentCode(String departmentCode) {
		this.departmentCode = departmentCode;
	}

	public String getDepartmentName() {
		return this.departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}

	public String getDepartmentNo() {
		return this.departmentNo;
	}

	public void setDepartmentNo(String departmentNo) {
		this.departmentNo = departmentNo;
	}


	public Date getLastChgDate() {
		return this.lastChgDate;
	}

	public void setLastChgDate(Date lastChgDate) {
		this.lastChgDate = lastChgDate;
	}

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public List<DoctorRoaster> getDoctorRoasters() {
		return this.doctorRoasters;
	}

	public void setDoctorRoasters(List<DoctorRoaster> doctorRoasters) {
		this.doctorRoasters = doctorRoasters;
	}

	public DoctorRoaster addDoctorRoaster(DoctorRoaster doctorRoaster) {
		getDoctorRoasters().add(doctorRoaster);
		doctorRoaster.setMasDepartment(this);

		return doctorRoaster;
	}

	public DoctorRoaster removeDoctorRoaster(DoctorRoaster doctorRoaster) {
		getDoctorRoasters().remove(doctorRoaster);
		doctorRoaster.setMasDepartment(null);

		return doctorRoaster;
	}

	public Users getUser() {
		return this.user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public List<MasEmployee> getMasEmployees() {
		return this.masEmployees;
	}

	public void setMasEmployees(List<MasEmployee> masEmployees) {
		this.masEmployees = masEmployees;
	}

	public MasEmployee addMasEmployee(MasEmployee masEmployee) {
		getMasEmployees().add(masEmployee);
		masEmployee.setMasDepartment(this);

		return masEmployee;
	}

	public MasEmployee removeMasEmployee(MasEmployee masEmployee) {
		getMasEmployees().remove(masEmployee);
		masEmployee.setMasDepartment(null);

		return masEmployee;
	}

	public MasDepartmentType getMasDepartmentType() {
		return this.masDepartmentType;
	}

	public void setMasDepartmentType(MasDepartmentType masDepartmentType) {
		this.masDepartmentType = masDepartmentType;
	}

	public List<AppSetup> getAppSetups() {
		return appSetups;
	}

	public void setAppSetups(List<AppSetup> appSetups) {
		this.appSetups = appSetups;
	}

}