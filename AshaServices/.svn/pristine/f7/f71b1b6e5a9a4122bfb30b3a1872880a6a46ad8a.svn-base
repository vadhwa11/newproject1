package com.icg.jkt.dao.impl;

import java.sql.Date;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;

import com.icg.jkt.dao.AdminDao;
import com.icg.jkt.entity.DoctorRoaster;
import com.icg.jkt.entity.MasAppointmentSession;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasDoctorMapping;
import com.icg.jkt.entity.MasEmpanelledHospital;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasHospital;
import com.icg.jkt.entity.UserApplication;
import com.icg.jkt.entity.Users;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.CommonUtil;

@Repository
public class AdminDaoImpl implements AdminDao {
	
	@Autowired
	GetHibernateUtils getHibernateUtils;	

	@SuppressWarnings("unchecked")
	@Override
	public List<MasDepartment> getDepartmentList(HashMap<String, Object> map) {
		String hID = (String)map.get("hospitalID");
		Long hospitalID = Long.parseLong(hID);	
		
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();			
			//list = session.createSQLQuery("select m.department_name, m.department_id from mas_department m join mas_department_type mt on m.DEPARTMENT_TYPE_ID = mt.DEPARTMENT_TYPE_ID where m.STATUS = 'y'	and mt.DEPARTMENT_TYPE_CODE = 'OPD' order by department_name asc").list();
			List<MasDepartment> departmentList = session.createCriteria(MasDepartment.class,"md")	
					.createAlias("md.masDepartmentType", "mdt")
					.add(Restrictions.eq("mdt.departmentTypeCode", "OPD"))
					.add(Restrictions.eq("status", "y"))
					.list();
			System.out.println("size is "+departmentList.size());
		    getHibernateUtils.getHibernateUtlis().CloseConnection();
		    
			return departmentList;
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<MasDoctorMapping> getDoctorList(HashMap<String, Object> jsondata) {
		String deptID = (String) jsondata.get("departmentID");
		Long dpid = Long.parseLong(deptID);
		System.out.println("department id is "+dpid);
		List<MasDoctorMapping> list = new ArrayList<MasDoctorMapping> ();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		list = session.createCriteria(MasDoctorMapping.class)
				.createAlias("departmentID", "dt")
				.add(Restrictions.eq("dt.departmentTypeId", dpid)).list();
		
		return list;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getDoctorRoaster(HashMap<String, Object> map) {
		System.out.println(map.toString());
		Map<String, Object> jsonResponse = new HashMap<>();
		HashMap<String, Object> roasterData = new HashMap<>();
		String deptId = (String) map.get("departmentID");
		long dpid = Long.parseLong(deptId);
		SimpleDateFormat formatter = new SimpleDateFormat("yy-MM-dd");
		SimpleDateFormat formatter2 = new SimpleDateFormat("dd-MMM-yy");
		java.util.Date fromDate =null;
		java.util.Date toDate =null;
		 if(map.get("fromDate")!=null)
	     {
			 
			 try {				 
				 java.util.Date utilDate = formatter.parse((String)map.get("fromDate"));
				 String fdate = formatter2.format(utilDate);
				 
				 System.out.println("fromDate "+fdate);
				 SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yy");
				 java.util.Date parsed = format.parse(fdate);
			      fromDate = new java.sql.Date(parsed.getTime());
			      fromDate = parsed;
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			 
				Calendar c = Calendar.getInstance();
				c.setTime(fromDate);
				c.add(Calendar.DATE, 6); 
				toDate = new java.sql.Date(c.getTime().getTime());
	     }
		 
		System.out.println("dpid "+dpid+" fromdate"+fromDate+" todate "+toDate);
		List<DoctorRoaster> list = new ArrayList<>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria c=session.createCriteria(DoctorRoaster.class);
				c.add(Restrictions.between("roasterDate", fromDate, toDate))				
				.add(Restrictions.eq("masDepartment.departmentId", dpid));
				list=c.list();	 

				System.out.println("list size is "+list.size());
		List<MasAppointmentSession> checkboxConfigurationDetail = new ArrayList<>();
		checkboxConfigurationDetail = session.createCriteria(MasAppointmentSession.class,"mas")
				.createAlias("masAppointmentType", "mat")
				.add(Restrictions.eq("masDepartment.departmentId", dpid))				 
				.addOrder(Order.asc("mat.appointmentTypeName"))
				.list();
		
					    
/*					    Criteria crit = session.createCriteria(MasAppointmentSession.class)
					    		.createAlias("masAppointmentType", "mat")
								.add(Restrictions.eq("masDepartment.departmentId", dpid))				 
								.addOrder(Order.asc("mat.appointmentTypeName"))
					    		.setProjection(
					    	    Projections.distinct(Projections.projectionList()
					    	    .add(Projections.property("masAppointmentType"), "masAppointmentType") ))
					    	.setResultTransformer(Transformers.aliasToBean(MasAppointmentSession.class)); 
					    
					    checkboxConfigurationDetail =    crit.list();*/
		
		System.out.println("sessionlist size is "+checkboxConfigurationDetail.size());
		jsonResponse.put("doctorRoasterDetail", list);
		jsonResponse.put("checkboxConfigurationDetail", checkboxConfigurationDetail);
		return jsonResponse;
		
	}
	

	@Override
	public String submitDepartmentRoaster(List<String[]> allrowdata, String changeDate, String changeTime, Long changeBy, Long dept_id, Long hostpitalID) {
		try {

		String result = "";
		java.util.Date currentDate =  CommonUtil.convertStringTypeDateToDateType(changeDate);
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();		
		Transaction tx = session.beginTransaction();
		MasDepartment md = new MasDepartment();
		md.setDepartmentId(dept_id);
		MasHospital mh = new MasHospital();
		mh.setHospitalId(hostpitalID);
		/*MasEmployee me = new MasEmployee();
		me.setEmployeeId(1l);*/
		Users users = new Users();
		users.setUserId(changeBy);
		DoctorRoaster dr = null;
		System.out.println("dept_id "+dept_id+" changeBy "+changeBy+" doctorId");
		for(int i=0;i<allrowdata.size();i++) {
			
			String[] rowdata = allrowdata.get(i);
			long id = 0;
			java.util.Date roasterDate = null;
			String roasterValue = null;	
				if (rowdata.length > 0) {
					if(rowdata[0].equals("")) {
						rowdata[0] = "0";
					}
					id = Long.parseLong(rowdata[0]);
					//roasterDate = CommonUtil.convertStringDateToSQLDate(rowdata[1]);
					roasterDate = CommonUtil.convertStringTypeDateToDateType(rowdata[1]);
					roasterValue = rowdata[2];
					System.out.println("id " + id+" roasterDate "+roasterDate+" roasterValue "+roasterValue);
				} 
			
					System.out.println("id is "+id);
					dr = (DoctorRoaster) session.get(DoctorRoaster.class, id);	
					if(dr!=null) {
						
						dr.setRoasterDate(roasterDate);
						dr.setRoasterValue(roasterValue);
						dr.setLastChgDate(new Timestamp(currentDate.getTime()));
						dr.setUser(users);
						dr.setMasDepartment(md);
						dr.setMasHospital(mh);	
						//dr.setMasEmployee(me);						
						
						session.update(dr);	
					}else {
						dr = new DoctorRoaster();						
						dr.setRoasterDate(roasterDate);
						dr.setRoasterValue(roasterValue);
						dr.setLastChgDate(new Timestamp(currentDate.getTime()));
						dr.setUser(users);
						dr.setMasDepartment(md);
						dr.setMasHospital(mh);		
						session.save(dr);	
					}
				
					/*md.setDepartmentId(dept_id);
					//mh.setHospitalID(hostpitalID);
					dr.setRoasterDate(roasterDate);
					dr.setRoasterValue(roasterValue);
					dr.setChgDate(roasterDate);
					dr.setChgTime(changeTime);
					dr.setUser(users);
					dr.setMasDepartment(md);
					dr.setMasEmployee(me);
					dr.setHospitalId(hostpitalID);		
					session.saveOrUpdate(dr);			*/		
			}
		
		tx.commit();
		session.close();
		return "Records Added Successfully";
		
	}catch(Exception ex) {
		ex.printStackTrace();
		return "Error";
	}
	}
/**************************** USER APPLICATION*******************************************/
	@Override
	public Map<String, List<UserApplication>> getAllUserApplication(JSONObject jsonObject) {
		int pageSize = 5;
		int pageNo=1;
		
		Map<String, List<UserApplication>> mapObj = new HashMap<String, List<UserApplication>>();
		List<UserApplication> userAppList = new ArrayList<UserApplication>();
		List totalMatches = new ArrayList();
		
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(UserApplication.class);			
					
			if( jsonObject.get("PN")!=null)
			 pageNo = Integer.parseInt(jsonObject.get("PN").toString());
					
			String appName="";
			
				 if (jsonObject.has("appName"))
				 {
					 appName = jsonObject.get("appName")+"%";
					  if(jsonObject.get("appName").toString().length()>0 && !jsonObject.get("appName").toString().trim().equalsIgnoreCase("")) {
							criteria.add(Restrictions.like("appName", appName));
						}
				 }				
				 criteria.addOrder(Order.asc("appName"));
				 totalMatches =criteria.list();
			
			
			 criteria.setFirstResult((pageSize) * (pageNo - 1));		
			 criteria.setMaxResults(pageSize);		
			 userAppList = criteria.list();
			
			 mapObj.put("totalMatches", totalMatches);
			mapObj.put("userAppList", userAppList);
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return mapObj;
	}
}
