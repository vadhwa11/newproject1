package com.icg.jkt.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.icg.jkt.entity.MasTrade;
import com.icg.jkt.service.GenericApiService;
import com.icg.jkt.service.MasterService;

/** Copyright 2019 JK Technosoft Ltd. All rights reserved.
* Use is subject to license terms.
* Purpose of the HMS -  This is for login.
* @author  Krishna Thakur
* Create Date: 16/01/2019 
* @version 0.1
*/

@RequestMapping("/v0.1/master")
@RestController
@CrossOrigin
public class MasterController {
	
	@Autowired
	MasterService ms;
	
	
	//////// Get Master Department List ///////////////////////////////
	
	
	@RequestMapping(value="/getDepartmentList", method = RequestMethod.GET)
	public String departmentList(@RequestBody HashMap<String, String> jsondata, HttpServletRequest request) 
	{
		return ms.departmentList(jsondata, request);
	}
	
	////////////////// Get Master ICD List /////////////////////////////
	
	@RequestMapping(value="/getICDList", method = RequestMethod.GET)
	public String getICD(@RequestBody HashMap<String, String> jsondata, HttpServletRequest request) {
		return ms.getICD(jsondata, request);
	}
	
	/**
	 * @author rajdeo.kumar
	 * @param stateData
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/getAllStates", method=RequestMethod.POST, produces="application/json",consumes="application/json")
	public String getAllStates(@RequestBody HashMap<String, String> stateDataPayload, HttpServletRequest request, HttpServletResponse response) {
		String stateData="";
		JSONObject jsonObject = new JSONObject(stateDataPayload);
		System.out.println("jsonObject :: "+jsonObject);
		stateData = ms.getAllStates(jsonObject, request, response);
		System.out.println("stateData :: "+stateData);
		return stateData;
	}
	
	/**
	 * 
	 * @param tradeMaster
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/getTradeDetails", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String getTradeDetails(@RequestBody HashMap<String, String> tradePayload, HttpServletRequest request,
			HttpServletResponse response) {
		String tradeDetails="";
		tradeDetails = ms.getTradeDetails(tradePayload,request,response);
		return tradeDetails;
	}
	

	@RequestMapping(value="/getTradeList", method = RequestMethod.POST)
	public Map<String,Object> getTradeList(HttpServletRequest request, HttpServletResponse response){
		System.out.println("getTradeList");
		Map< String, Object>map = new HashMap<String,Object>();
		System.out.println("map :: "+map);
		map = ms.getTradeList(request,response);
		return map;
	}
	
	@RequestMapping(value="/addTradeDetails",method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String addTradeDetails(@RequestBody HashMap<String, Object> tradePayload, HttpServletRequest request, HttpServletResponse response) {
		JSONObject json = new JSONObject(tradePayload);
		return ms.addTradeDetails(json,request, response);
	}
	/*************************************Mas Command***************************************************************/
	/**
	 * 
	 * @param Mascommand
	 * @param request
	 * @param response
	 * @return
	 */
	
	@RequestMapping(value="/addCommand", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String addCommand(@RequestBody HashMap<String, Object> command,HttpServletRequest request, HttpServletResponse response) {
		String addCmd="";
		System.out.println("API");
		JSONObject json = new JSONObject(command);
		System.out.println("API json: " + json);		
		addCmd = ms.addCommand(json,request, response);	
		return addCmd;
	}
	
	@RequestMapping(value="/getAllCommand", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String getAllCommand(@RequestBody Map<String, Object> payload, HttpServletRequest request, HttpServletResponse response) {
		String cmd="";
		JSONObject jsonObj = new JSONObject(payload);		
		cmd = ms.getAllCommand(jsonObj,request,response);
		return cmd;
	}
	
	@RequestMapping(value="/getCommand", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String getCommand(@RequestBody HashMap<String, Object> command, HttpServletRequest request) {
		String cmd="";
		cmd = ms.getCommand(command,request);
		System.out.println("API getCommand details :: "+cmd);
		return cmd;
	}
	
	@RequestMapping(value="/updateCommand", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String updateCommand(@RequestBody HashMap<String, Object> command,HttpServletRequest request, HttpServletResponse response) {
		String updateCmd="";
		System.out.println("API updateCommand :: "+command);
		updateCmd = ms.updateCommand(command,request,response);
		return updateCmd;
	}
	
	@RequestMapping(value="/statusCommand",method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String statusCommand(@RequestBody HashMap<String, Object> command,HttpServletRequest request, HttpServletResponse response) {
		String status="";
		status = ms.statusCommand(command,request,response);
		return status;
	}
	
	/**************************************MAS UOM Service*************************************************************/
	@RequestMapping(value="/addMasUOM", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String addMasUOM(@RequestBody Map<String, Object> masUnit, HttpServletRequest request,
			HttpServletResponse response) {
		String addUnit="";
		JSONObject jsonObject = new JSONObject(masUnit);
		addUnit = ms.addMasUOM(jsonObject,request);
		return 	addUnit;	
	}
	
	@RequestMapping(value="/getAllUOM", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String getAllUOM(@RequestBody Map<String, Object> masUnit, HttpServletRequest request, HttpServletResponse response) {
		String unit="";
		JSONObject jsonObject = new JSONObject(masUnit);
		unit = ms.getAllUOM(jsonObject,request,response);
		return unit;
	}
	
	@RequestMapping(value="/updateUOMDetails", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String updateUOMDetails(@RequestBody HashMap<String, Object> masUnit ,HttpServletRequest request, HttpServletResponse response) {
		String updateUom="";
		updateUom = ms.updateUOMDetails(masUnit,request,response);
		return updateUom;
	}
	
	@RequestMapping(value="/updateUOMStatus", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String updateUOMStatus(@RequestBody HashMap<String, Object> masUnit ,HttpServletRequest request, HttpServletResponse response) {
		String updateUomStatus="";
		updateUomStatus = ms.updateUOMStatus(masUnit,request,response);
		return updateUomStatus;
	}
	
	/************************************UNIT MASTER*********************************************/
	@RequestMapping(value="/getAllUnit", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String getAllUnit(@RequestBody Map<String, Object> unitPayload, HttpServletRequest request, HttpServletResponse response) {
		String unit="";
		JSONObject jsonObj = new JSONObject(unitPayload);
		System.out.println("jsonObj from service :: "+jsonObj);
		unit = ms.getAllUnit(jsonObj,request, response);
		return unit;
	}
	@RequestMapping(value="/getCommandList", method=RequestMethod.POST,produces="application/json", consumes="application/json")
	public String getCommandList(HttpServletRequest request, HttpServletResponse response) {
		String commandList="";
		commandList = ms.getCommandList(request,response);
		return commandList;
	}
	
	@RequestMapping(value="/addUnit", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String addUnits(@RequestBody Map<String, Object> unitPayload, HttpServletRequest request, HttpServletResponse response) {
		String addunit ="";
		JSONObject jsonObject = new JSONObject(unitPayload);
		System.out.println("jsonObject add Unit :: "+jsonObject);
		addunit = ms.addUnits(jsonObject, request, response);
		return addunit;
	}
	
	@RequestMapping(value="/getUnitType", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String getUnitType(HttpServletRequest request, HttpServletResponse response) {
		String unitTyp = "";
		unitTyp = ms.getUnitType(request, response);
		return unitTyp;
	}
	
	@RequestMapping(value="/updateUnit", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String updateUnit(@RequestBody HashMap<String, Object> unitPayload ,HttpServletRequest request, HttpServletResponse response) {
		String updateUnit="";
		updateUnit = ms.updateUnit(unitPayload,request,response);
		return updateUnit;
	}
	
	/*@RequestMapping(value="/updateStatus", method=RequestMethod.POST, produces="application/json", consumes="application/json")
	public String updateStatus(@RequestBody HashMap<String, Object> unitPayload ,HttpServletRequest request, HttpServletResponse response) {
		String updtStatus = "";
		updtStatus = ms.updateStatus(unitPayload, request, response);
		return updtStatus;
	}*/
}
