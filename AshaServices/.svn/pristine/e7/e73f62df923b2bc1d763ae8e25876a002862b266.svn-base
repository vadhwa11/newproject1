package com.icg.jkt.dao.impl;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.icg.jkt.dao.OpdDao;
import com.icg.jkt.entity.AdmissionDischarge;
import com.icg.jkt.entity.MasAdministrativeSex;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasDisposal;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasAdministrativeSex;
import com.icg.jkt.entity.MasHospital;
import com.icg.jkt.entity.MasIdealWeight;
import com.icg.jkt.entity.MasRelation;
import com.icg.jkt.entity.OpdObesityDt;
import com.icg.jkt.entity.OpdObesityHd;
import com.icg.jkt.entity.OpdPatientDetail;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.ReferralPatientDt;
import com.icg.jkt.entity.ReferralPatientHd;
import com.icg.jkt.entity.Users;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.Visit;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.CommonUtil;
import com.icg.jkt.utils.HMSUtil;

@Repository
@Transactional
public class OpdDaoImpl implements OpdDao {
	
	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Autowired
	SessionFactory sessionFactory;
	
	@Override
	public String opdVitalDetails(OpdPatientDetail ob) {

		String Result = null;

		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria cr = session.createCriteria(OpdPatientDetail.class);
			Transaction t = session.beginTransaction();
			Serializable id = session.save(ob);
			t.commit();
			if (id != null) {
				Result = "200";
			} else {
				Result = "500";
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			Result = e.getMessage();
			e.printStackTrace();
		}
		return Result;
	}

	@Override
	public MasEmployee checkEmp(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasEmployee.class);
	    cr.add(Restrictions.eq("employeeId", i));
	    MasEmployee list = (MasEmployee) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public Patient checkPatient(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Patient.class);
	    cr.add(Restrictions.eq("patientId", i));
	    Patient list = (Patient) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public MasAdministrativeSex checkGender(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasAdministrativeSex.class);
	    cr.add(Restrictions.eq("administrativeSexId", i));
	    MasAdministrativeSex list = (MasAdministrativeSex) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	
	@Override
	public MasRelation checkRelation(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasRelation.class);
	    cr.add(Restrictions.eq("relationId", i));
	    MasRelation list = (MasRelation) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<Visit> getVisit() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Visit.class);

		//ProjectionList projectionList = Projections.projectionList();
		//projectionList.add(Projections.property("TOKEN_NO").as("TOKEN_NO"));
		//projectionList.add(Projections.property("PATIENT_ID").as("PATIENT_ID"));
		
		//cr.setProjection(projectionList);
		List<Visit> list = cr.list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public List<Patient> getPatinet() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Patient.class);

		//ProjectionList projectionList = Projections.projectionList();
		//projectionList.add(Projections.property("TOKEN_NO").as("TOKEN_NO"));
		//projectionList.add(Projections.property("PATIENT_ID").as("PATIENT_ID"));
		
		//cr.setProjection(projectionList);
		List<Patient> list = cr.list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> getObesityWaitingList(HashMap<String, Object> jsondata){
		
		long hospitalId = (Integer)jsondata.get("hospitalId");
		Session session = getHibernateUtils.getHibernateUtlis().getCurrentSession();
		@SuppressWarnings("unchecked")
		String serviceNo = String.valueOf(jsondata.get("service_no"));
		String patientName = String.valueOf(jsondata.get("patient_name")).trim();
		System.out.println("service no "+serviceNo);
		List<OpdObesityHd> patientObesityList = new ArrayList<OpdObesityHd>();
		Map<String,Object> map = new HashMap<String,Object>();
		
		if(serviceNo != null && !serviceNo.equals("") && !serviceNo.equals("null")) {
			Criteria criteria = session.createCriteria(OpdObesityHd.class,"csr");
			criteria.createAlias("csr.patient", "pt");
			criteria.add(Restrictions.eq("pt.serviceNo",serviceNo))
			.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
			.add(Restrictions.isNull("closeDate"));
			patientObesityList=criteria.list();			
			
			/*if(patientObesityList != null && patientObesityList.size()>0) {
				map.put("patientList", patientObesityList);
				map.put("count", patientObesityList.size());
			}*/
		}else if(patientName != null && !patientName.equals("") && !patientName.equals("null")){
			Criteria criteria = session.createCriteria(OpdObesityHd.class,"csr");
			criteria.createAlias("csr.patient", "pt");
			criteria.add(Restrictions.eq("pt.patientName",patientName))
			.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
			.add(Restrictions.isNull("closeDate"));
			patientObesityList=criteria.list();			
			
			/*if(patientObesityList != null && patientObesityList.size()>0) {
				map.put("patientList", patientObesityList);
				map.put("count", patientObesityList.size());
			}*/
			
		}else {
		patientObesityList  = session.createCriteria(OpdObesityHd.class)
						.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
						.add(Restrictions.isNull("closeDate"))
						.list();
		/*if(patientObesityList != null && patientObesityList.size()>0) {
			map.put("patientList", patientObesityList);
			map.put("count", patientObesityList.size());
		}*/
		}
		
		if(patientObesityList != null) {
			map.put("patientList", patientObesityList);
			map.put("count", patientObesityList.size());
		}		
		return map;			
	}	
	
	@Override
	public Map<String,Object> getObesityDetails(HashMap<String, Object> jsondata){
		long headerId = (Integer)jsondata.get("id");
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String,Object> jsonData = new HashMap<>();
		@SuppressWarnings("unchecked")
		List<OpdObesityHd> obesityList = session.createCriteria(OpdObesityHd.class)
				.add(Restrictions.eq("obesityHdId",headerId))
				.list();
		
		@SuppressWarnings("unchecked")
		List<OpdObesityDt> obesityDetailList = session.createCriteria(OpdObesityDt.class)
				.add(Restrictions.eq("opdObesityHd.obesityHdId",headerId))
				.list();		
		
		jsonData.put("obesityList", obesityList);
		jsonData.put("obesityDetailList", obesityDetailList);
		return jsonData;
	}
	
	@SuppressWarnings("unused")
	@Override
	public List<String> getIdealWeight(Long height, String age) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		List<MasIdealWeight> list = null;
		List<String> searchList = null;
		try {		
		String Query = "select weight as idealWeight from mas_ideal_weight where '" + age
				+ "' between FROM_AGE and TO_AGE and '" + height + "' between FROM_HEIGHT and TO_HEIGHT";
		if (Query != null) {
			searchList = session.createSQLQuery(Query).list();
		} else {
			System.out.println("No Record Found");
		}
		return searchList;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return searchList;
	}
	
	@Override
	public String saveObesityDetails(HashMap<String, Object> jsondata) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		try {
			OpdObesityHd opdHeader = new OpdObesityHd();
			Map<String, Object> jsonData = new HashMap<>();
			Transaction tx = session.beginTransaction();
			//get input value
			long headerId = (Integer.valueOf((int) jsondata.get("header_id")));
			//long headerId = Long.parseLong(hId) ;
			
			String date = (String) jsondata.get("obesity_date");
			Date obesityDate = CommonUtil.convertStringTypeDateToDateType(date);
			
			String month = ( String.valueOf(jsondata.get("month_name")));
			
			String h = (String.valueOf(jsondata.get("height")));
			BigDecimal height = new BigDecimal(h);
			
			int w = (Integer.valueOf((int)jsondata.get("weight")));
			BigDecimal weight = new BigDecimal(w);
			
			String iw = (String.valueOf(jsondata.get("ideal_weight")));
			BigDecimal idealWeight = new BigDecimal(iw);
			
			String v = (String.valueOf(jsondata.get("variation")));
			BigDecimal variation = new BigDecimal(v);
			//BigDecimal variation = new BigDecimal(String.valueOf(jsondata.get("variation")));
/*			
			long b = (Integer) jsondata.get("bmi");
			BigDecimal bmi = BigDecimal.valueOf(b).movePointLeft(0);*/
			BigDecimal bmi = new BigDecimal(String.valueOf(jsondata.get("bmi")));
			
			String obesityCheck = String.valueOf(jsondata.get("obesity_check"));
			
			if(obesityCheck.equals("y")) {
				opdHeader = (OpdObesityHd)session.get(OpdObesityHd.class, headerId);
				if(opdHeader != null) {
				
				opdHeader.setCloseDate(obesityDate);
				session.update(opdHeader);
				}
			}
			
			OpdObesityHd opdHd = new OpdObesityHd();
			opdHd.setObesityHdId(headerId);
			OpdObesityDt dt = new OpdObesityDt();
			// set input value to entity and save 
			dt.setOpdObesityHd(opdHd);
			dt.setObesityDate(obesityDate);
			dt.setMonth(month);
			dt.setHeight(height);
			dt.setWeight(weight);
			dt.setIdealWeight(idealWeight);
			dt.setVariation(variation);
			dt.setBmi(bmi);
			session.save(dt);
			tx.commit();
			return "Obesity detail updated Successfully";
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return "Error occured while updating obesity detail";
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,Object> referredPatientList(HashMap<String, String> jsondata) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String,Object> map = new HashMap<>();
		try {		
		long hospitalId = Long.parseLong(String.valueOf(jsondata.get("hospital_id")));
		long pageNo = Long.parseLong(String.valueOf(jsondata.get("pageNo")));
		String mobileNo = String.valueOf(jsondata.get("mobile_no"));
		String patientName = String.valueOf(jsondata.get("patient_name"));
		String serviceNo = String.valueOf(jsondata.get("serviceNo"));
		List<ReferralPatientHd> list = new ArrayList<>();
		if(mobileNo != null && !mobileNo.equals("")&& !mobileNo.equals("null")) {
			list = session.createCriteria(ReferralPatientHd.class,"rph")
					.add(Restrictions.eq("status", "W"))
					.add(Restrictions.isNull("masHospital1"))
					.createAlias("rph.patient", "patient")
					.add(Restrictions.eq("patient.mobileNo", mobileNo))
					.add(Restrictions.eq("masImpanneledHospital.impanneledHospitalId", hospitalId)).list();	
		}else if(patientName != null && !patientName.equals("") && !patientName.equals("null")) {
			list = session.createCriteria(ReferralPatientHd.class,"rph")
					.add(Restrictions.eq("status", "W"))
					.add(Restrictions.isNull("masHospital1"))
					.createAlias("rph.patient", "patient")					
					.add(Restrictions.eq("patient.patientName", patientName))
					.add(Restrictions.eq("masImpanneledHospital.impanneledHospitalId", hospitalId)).list();	
		}else if(serviceNo != null && !serviceNo.equals("") && !serviceNo.equals("null")) {
			list = session.createCriteria(ReferralPatientHd.class,"rph")
					.add(Restrictions.eq("status", "W"))
					.add(Restrictions.isNull("masHospital1"))
					.createAlias("rph.patient", "patient")					
					.add(Restrictions.eq("patient.serviceNo", serviceNo))
					.add(Restrictions.eq("masImpanneledHospital.impanneledHospitalId", hospitalId)).list();	
		}else {
			list = session.createCriteria(ReferralPatientHd.class,"rph")
					.add(Restrictions.isNull("masHospital1"))
					.add(Restrictions.eq("status", "W"))
					.createAlias("rph.masImpanneledHospital", "mih")
					.add(Restrictions.eq("mih.impanneledHospitalId", hospitalId)).list();	
		}					
		
		if(list != null && list.size()>0) {
			map.put("referredPatientList", list);
			map.put("count", list.size());
		}
		return map;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally{
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> referredPatientDetail(HashMap<String, String> jsondata) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String, Object> map = new HashMap<>();
		try {		
		long id = Long.parseLong(String.valueOf(jsondata.get("id")));		
		List<ReferralPatientHd> headerList = session.createCriteria(ReferralPatientHd.class,"rph")				
				.add(Restrictions.eq("id", id)).list();

		List<ReferralPatientDt> detailList = (List<ReferralPatientDt>) session.createCriteria(ReferralPatientDt.class)
				.add(Restrictions.eq("referralPatientHd.id", id))
				.add(Restrictions.isNull("masDepartment"))
				.add(Restrictions.eq("mb", "N"))
				.add(Restrictions.eq("admitted", "N"))
				.add(Restrictions.eq("close", "N")).list();
		
		if(headerList != null) {
			map.put("referredHeaderList", headerList);
		}
		
		if(detailList != null) {
			map.put("referredDetailList", detailList);
		}		

		return map;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> updateReferralDetail(HashMap<String, Object> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String, Object> map = new HashMap<>();
		try {
		String message = "";
		long headerId = Long.parseLong((String) jsondata.get("header_id"));
		long patientId = Long.parseLong((String) jsondata.get("patient_id"));
		ReferralPatientHd referralPatientHd = null;
		List<HashMap<String, String>> list = (List<HashMap<String, String>>) jsondata.get("detail_list");
		
		Transaction tx = session.beginTransaction();
		try {
			for (int i = 0; i < jsondata.size(); i++) {
				for (HashMap<String, String> data : list) {

					long id = Long.parseLong(String.valueOf((String) data.get("id")));
					String finalNote = String.valueOf(((String) data.get("final_note")));
					String notifiable_disease = String.valueOf(((String) data.get("notifiable_disease")));
					String markMb = String.valueOf(((String) data.get("mark_mb")));
					String markAdmitted = String.valueOf(((String) data.get("mark_admitted")));
					String close = String.valueOf(((String) data.get("close")));
					ReferralPatientDt referralPatientDt = (ReferralPatientDt) session.get(ReferralPatientDt.class, id);
					if (referralPatientDt != null) {

						referralPatientDt.setFinalNote(finalNote);
						referralPatientDt.setDisease(notifiable_disease);
						referralPatientDt.setMb(markMb);
						referralPatientDt.setClose(close);
						referralPatientDt.setAdmitted(markAdmitted);
						session.update(referralPatientDt);
						
					} else {
						message = "Record not found for id =" + id;
						map.put("msg",message);
						return map;
					}					

				}

			}
			
			referralPatientHd = (ReferralPatientHd) session.get(ReferralPatientHd.class, headerId);
			if (referralPatientHd != null) {
				referralPatientHd.setStatus("D");
				session.update(referralPatientHd);
			}
			
			AdmissionDischarge admissionDischarge = new AdmissionDischarge();
			Patient patient = new Patient();
			patient.setPatientId(patientId);
			ReferralPatientHd referralPatientHd2 = new ReferralPatientHd();
			referralPatientHd2.setId(headerId);
			admissionDischarge.setReferralPatientHd(referralPatientHd2);
			admissionDischarge.setPatient(patient);
			session.save(admissionDischarge);
			
		} catch (Exception ex) {
			ex.printStackTrace();
			message = "Records updated Failed";
			map.put("msg", message);
		} finally {
			tx.commit();
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			message = "Records updated";
			map.put("msg", message);
		}
		return map;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,Object> getAdmissionDischargeList(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response){
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String,Object> map = new HashMap<>();
		try {
		long hospitalId = Long.parseLong(String.valueOf(jsondata.get("hospital_id")));
		String serviceNo = String.valueOf(jsondata.get("service_no"));
		String patientName = String.valueOf(jsondata.get("patient_name"));		
		List<AdmissionDischarge> admissionPendingList = new ArrayList<>();		
		List<AdmissionDischarge> dischargePendingList = new ArrayList<>();
		if (serviceNo != null && !serviceNo.isEmpty() && !serviceNo.equals("null")) {

			admissionPendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.createAlias("ad.patient", "patient")
					.add(Restrictions.eq("patient.serviceNo", serviceNo))
					.list();

			dischargePendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNotNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.createAlias("ad.masHospital", "mih")
					.add(Restrictions.eq("mih.hospitalId", hospitalId))
					.createAlias("ad.patient", "patient")
					.add(Restrictions.eq("patient.serviceNo", serviceNo)).list();

		} else if (patientName != null && !patientName.isEmpty() && !patientName.equals("null")) {
			admissionPendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.createAlias("ad.patient", "patient")
					.add(Restrictions.eq("patient.patientName", patientName))
					.list();

			dischargePendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNotNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.createAlias("ad.masHospital", "mih")
					.add(Restrictions.eq("mih.hospitalId", hospitalId))
					.createAlias("ad.patient", "patient")
					.add(Restrictions.eq("patient.patientName", patientName)).list();

		} else {
			admissionPendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.list();

			dischargePendingList = session.createCriteria(AdmissionDischarge.class, "ad")
					.add(Restrictions.isNotNull("ad.dateOfAdmission")).add(Restrictions.isNull("ad.dateOfDischarge"))
					.createAlias("ad.masHospital", "mih")
					.add(Restrictions.eq("mih.hospitalId", hospitalId)).list();
		}
			
		
		System.out.println("conunt value is "+admissionPendingList.size());
		if(admissionPendingList != null) {
			map.put("admissionPendingList", admissionPendingList);
			map.put("count1", admissionPendingList.size()+"");
		}
		if(dischargePendingList != null) {
			map.put("dischargePendingList",dischargePendingList);
			map.put("count2",dischargePendingList.size()+"");
		}
		return map;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,Object> admissionAndDischarge(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		
		Map<String,Object> map = new HashMap<>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		//try {
		long id = Long.parseLong(jsondata.get("id"));
		List<AdmissionDischarge> patientDetail = session.createCriteria(AdmissionDischarge.class)
				.add(Restrictions.eq("id", id)).list();
		
		List<MasDisposal> disposalList = session.createCriteria(MasDisposal.class).add(Restrictions.isNotNull("disposalCode")).list();
		
		if(patientDetail != null) {
			map.put("patientDetail", patientDetail);
		}
		
		if(disposalList != null) {
			map.put("disposalList", disposalList);
		}
		
		return map;
	/*	}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;*/
	}
	
	@Override
	public String savePatientAdmission(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		try {
		ReferralPatientHd referHeaderId = null;
		if(jsondata.containsKey("header_id")) {
			if(jsondata.get("header_id") != null && !jsondata.get("header_id").equals("")) {
				long headerId = Long.parseLong(jsondata.get("header_id"));
				referHeaderId = new ReferralPatientHd();
				referHeaderId.setId(headerId);
			}			
		}
		
		MasHospital masHospital= null;
		if(jsondata.containsKey("hospital_id")) {
			if(jsondata.get("hospital_id") != null && !jsondata.get("hospital_id").equals("")) {
				long hospitalId = Long.parseLong(jsondata.get("hospital_id"));
				masHospital = new MasHospital();
				masHospital.setHospitalId(hospitalId);
			}			
		}
		
		long admissionId = Long.parseLong(jsondata.get("admission_id"));
		long patientId = Long.parseLong(String.valueOf(jsondata.get("patient_id")));
		Date admissionDate = HMSUtil.convertStringDateToUtilDate(String.valueOf(jsondata.get("admission_date")), "yyyy-MM-dd");
		BigDecimal wardNo = null;
		if(jsondata.get("ward") != null && !jsondata.get("ward").equals("")) {
			String ward = String.valueOf(jsondata.get("ward"));
			 wardNo = new BigDecimal(ward);
		}		
		long disposalId = Long.parseLong(String.valueOf(jsondata.get("disposal")));
		String noOfDays = String.valueOf(jsondata.get("no_of_days"));
		BigDecimal days = new BigDecimal(noOfDays);
		String remarks = String.valueOf(jsondata.get("remark"));
		Date dischargeDate = null;
		if(jsondata.get("discharge_date") != null && !jsondata.get("discharge_date").isEmpty()) {
			dischargeDate = HMSUtil.convertStringDateToUtilDate((String.valueOf(jsondata.get("discharge_date"))),"yyyy-MM-dd");
		}
		String admissionNo = null;
		if(jsondata.get("admission_no") != null && !jsondata.get("admission_no").isEmpty()) {
			admissionNo = String.valueOf(jsondata.get("admission_no"));
		}				
		
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Transaction tx = session.beginTransaction();
		AdmissionDischarge admissionDischarge = null;
		admissionDischarge =  (AdmissionDischarge) session.get(AdmissionDischarge.class, admissionId);
		if(admissionDischarge != null) {          
			admissionDischarge.setAdmissionNo(admissionNo);
			admissionDischarge.setDateOfAdmission(admissionDate);
			admissionDischarge.setDateOfDischarge(dischargeDate);
			MasDisposal masDisposal = new MasDisposal();
			masDisposal.setDisposalId(disposalId);
			admissionDischarge.setMasDisposal(masDisposal);
			admissionDischarge.setNoOfDays(days);
			Patient patient = new Patient();
			patient.setPatientId(patientId);
			admissionDischarge.setPatient(patient);
			/*ReferralPatientHd referHeaderId = new ReferralPatientHd();
			referHeaderId.setId(headerId);*/
			admissionDischarge.setReferralPatientHd(referHeaderId);
			admissionDischarge.setRemarks(remarks);
			admissionDischarge.setWardNo(wardNo);
			admissionDischarge.setMasHospital(masHospital);
			session.update(admissionDischarge);
		}else {
			AdmissionDischarge admission = new AdmissionDischarge();
			admission.setAdmissionNo(admissionNo);
			admission.setDateOfAdmission(admissionDate);
			MasDisposal masDisposal = new MasDisposal();
			masDisposal.setDisposalId(disposalId);
			admission.setMasDisposal(masDisposal);
			admission.setNoOfDays(days);
			Patient patient = new Patient();
			patient.setPatientId(patientId);
			admission.setPatient(patient);
			/*ReferralPatientHd referHeaderId = new ReferralPatientHd();
			referHeaderId.setId(headerId);*/
			admission.setReferralPatientHd(referHeaderId);
			admission.setRemarks(remarks);
			admission.setWardNo(wardNo);	
			admissionDischarge.setMasHospital(masHospital);
			session.save(admission);
		}
		
		tx.commit();
		
		return "Admission Done Successfully";
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return "Error While Saving Admission";
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,Object> getServiceWisePatientList(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response){
		Map<String,Object> map = new HashMap<>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		try {
		String serviceNo = String.valueOf(jsondata.get("service_no"));		
		List<MasDisposal> disposalList = session.createCriteria(MasDisposal.class).add(Restrictions.isNotNull("disposalCode")).list();
		if(disposalList != null) {
			map.put("disposalList", disposalList);
		}
		List<Patient> patientList = session.createCriteria(Patient.class).add(Restrictions.eq("serviceNo", serviceNo)).list();
		if(patientList != null) {
			map.put("patientList", patientList);
		}else {
			map.put("patientList", new JSONArray());
		}
		return map;
		}catch(Exception ex) {
			ex.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;		
	}
	
	@Override
	public String saveNewAdmission(HashMap<String, String> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Transaction tx = session.beginTransaction();
		try {
			long patientId = Long.parseLong(jsondata.get("patient_id"));
			Patient patient = new Patient();
			patient.setPatientId(patientId);
			long hospitalId = Long.parseLong(jsondata.get("hospital_id"));
			MasHospital masHospital = new MasHospital();
			masHospital.setHospitalId(hospitalId);
			Date dateOfAdmission = HMSUtil.convertStringDateToUtilDate(jsondata.get("admission_date"),
					"yyyy-MM-dd");
			String admissionNo = String.valueOf(jsondata.get("admission_no"));
			String w = jsondata.get("ward");			
			BigDecimal ward = new BigDecimal(w);
			long disposalId = Long.parseLong(jsondata.get("disposal"));
			MasDisposal masDisposal = new MasDisposal();
			masDisposal.setDisposalId(disposalId);
			String remarks = jsondata.get("remarks");
			AdmissionDischarge admissionDischarge = new AdmissionDischarge();
			admissionDischarge.setPatient(patient);
			admissionDischarge.setMasHospital(masHospital);
			admissionDischarge.setAdmissionNo(admissionNo);
			admissionDischarge.setDateOfAdmission(dateOfAdmission);
			admissionDischarge.setMasDisposal(masDisposal);
			admissionDischarge.setRemarks(remarks);
			admissionDischarge.setWardNo(ward);
			session.save(admissionDischarge);
			return "Admission done Successfully";
		} catch (Exception ex) {
			ex.printStackTrace();
		}finally {			
			tx.commit();
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		
		return "Error while saving admission";
	}
}











