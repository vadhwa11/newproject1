package com.icg.jkt.dao.impl;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.icg.jkt.dao.OpdDao;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasGender;
import com.icg.jkt.entity.MasHospital;
import com.icg.jkt.entity.MasIdealWeight;
import com.icg.jkt.entity.MasRelation;
import com.icg.jkt.entity.OpdObesityDt;
import com.icg.jkt.entity.OpdObesityHd;
import com.icg.jkt.entity.OpdPatientDetail;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.Users;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.Visit;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.CommonUtil;

@Repository
@Transactional
public class OpdDaoImpl implements OpdDao {
	
	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Autowired
	SessionFactory sessionFactory;
	
	@Override
	public String opdVitalDetails(OpdPatientDetail ob) {

		String Result = null;

		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria cr = session.createCriteria(OpdPatientDetail.class);
			Transaction t = session.beginTransaction();
			Serializable id = session.save(ob);
			t.commit();
			if (id != null) {
				Result = "200";
			} else {
				Result = "500";
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			Result = e.getMessage();
			e.printStackTrace();
		}
		return Result;
	}

	@Override
	public MasEmployee checkEmp(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasEmployee.class);
	    cr.add(Restrictions.eq("employeeId", i));
	    MasEmployee list = (MasEmployee) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public Patient checkPatient(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Patient.class);
	    cr.add(Restrictions.eq("patientId", i));
	    Patient list = (Patient) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public MasGender checkGender(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasGender.class);
	    cr.add(Restrictions.eq("administrativeSexId", i));
	    MasGender list = (MasGender) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	
	@Override
	public MasRelation checkRelation(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasRelation.class);
	    cr.add(Restrictions.eq("relationId", i));
	    MasRelation list = (MasRelation) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<Visit> getVisit() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Visit.class);

		//ProjectionList projectionList = Projections.projectionList();
		//projectionList.add(Projections.property("TOKEN_NO").as("TOKEN_NO"));
		//projectionList.add(Projections.property("PATIENT_ID").as("PATIENT_ID"));
		
		//cr.setProjection(projectionList);
		List<Visit> list = cr.list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	public List<Patient> getPatinet() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Patient.class);

		//ProjectionList projectionList = Projections.projectionList();
		//projectionList.add(Projections.property("TOKEN_NO").as("TOKEN_NO"));
		//projectionList.add(Projections.property("PATIENT_ID").as("PATIENT_ID"));
		
		//cr.setProjection(projectionList);
		List<Patient> list = cr.list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> getObesityWaitingList(HashMap<String, Object> jsondata){
		
		long hospitalId = (Integer)jsondata.get("hospitalId");
		Session session = getHibernateUtils.getHibernateUtlis().getCurrentSession();
		@SuppressWarnings("unchecked")
		String serviceNo = String.valueOf(jsondata.get("service_no"));
		String patientName = String.valueOf(jsondata.get("patient_name")).trim();
		System.out.println("service no "+serviceNo);
		List<OpdObesityHd> patientObesityList = new ArrayList<OpdObesityHd>();
		Map<String,Object> map = new HashMap<String,Object>();
		
		if(serviceNo != null && !serviceNo.equals("") && !serviceNo.equals("null")) {
			Criteria criteria = session.createCriteria(OpdObesityHd.class,"csr");
			criteria.createAlias("csr.patient", "pt");
			criteria.add(Restrictions.eq("pt.serviceNo",serviceNo))
			.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
			.add(Restrictions.isNull("closeDate"));
			patientObesityList=criteria.list();			
			
			/*if(patientObesityList != null && patientObesityList.size()>0) {
				map.put("patientList", patientObesityList);
				map.put("count", patientObesityList.size());
			}*/
		}else if(patientName != null && !patientName.equals("") && !patientName.equals("null")){
			Criteria criteria = session.createCriteria(OpdObesityHd.class,"csr");
			criteria.createAlias("csr.patient", "pt");
			criteria.add(Restrictions.eq("pt.patientName",patientName))
			.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
			.add(Restrictions.isNull("closeDate"));
			patientObesityList=criteria.list();			
			
			/*if(patientObesityList != null && patientObesityList.size()>0) {
				map.put("patientList", patientObesityList);
				map.put("count", patientObesityList.size());
			}*/
			
		}else {
		patientObesityList  = session.createCriteria(OpdObesityHd.class)
						.add(Restrictions.eq("masHospital.hospitalId",hospitalId))
						.add(Restrictions.isNull("closeDate"))
						.list();
		/*if(patientObesityList != null && patientObesityList.size()>0) {
			map.put("patientList", patientObesityList);
			map.put("count", patientObesityList.size());
		}*/
		}
		
		if(patientObesityList != null && patientObesityList.size()>0) {
			map.put("patientList", patientObesityList);
			map.put("count", patientObesityList.size());
		}		
		return map;			
	}	
	
	@Override
	public Map<String,Object> getObesityDetails(HashMap<String, Object> jsondata){
		long headerId = (Integer)jsondata.get("id");
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Map<String,Object> jsonData = new HashMap<>();
		@SuppressWarnings("unchecked")
		List<OpdObesityHd> obesityList = session.createCriteria(OpdObesityHd.class)
				.add(Restrictions.eq("obesityHdId",headerId))
				.list();
		
		@SuppressWarnings("unchecked")
		List<OpdObesityDt> obesityDetailList = session.createCriteria(OpdObesityDt.class)
				.add(Restrictions.eq("opdObesityHd.obesityHdId",headerId))
				.list();		
		
		jsonData.put("obesityList", obesityList);
		jsonData.put("obesityDetailList", obesityDetailList);
		return jsonData;
	}
	
	@SuppressWarnings("unused")
	@Override
	public List<String> getIdealWeight(Long height, String age) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		List<MasIdealWeight> list = null;
		List<String> searchList = null;
		String Query = "select weight as idealWeight from mas_ideal_weight where '" + age
				+ "' between FROM_AGE and TO_AGE and height='" + height + "' ";
		System.out.println(Query);
		if (Query != null) {
			searchList = session.createSQLQuery(Query).list();
		} else {
			System.out.println("No Record Found");
		}
		return searchList;
	}
	
	@Override
	public String saveObesityDetails(HashMap<String, Object> jsondata) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		try {
			OpdObesityHd opdHeader = new OpdObesityHd();
			Map<String, Object> jsonData = new HashMap<>();
			Transaction tx = session.beginTransaction();
			//get input value
			long headerId = (Integer.valueOf((int) jsondata.get("header_id")));
			//long headerId = Long.parseLong(hId) ;
			
			String date = (String) jsondata.get("obesity_date");
			Date obesityDate = CommonUtil.convertStringTypeDateToDateType(date);
			
			String month = ( String.valueOf(jsondata.get("month_name")));
			
			String h = (String.valueOf(jsondata.get("height")));
			BigDecimal height = new BigDecimal(h);
			
			int w = (Integer.valueOf((int)jsondata.get("weight")));
			BigDecimal weight = new BigDecimal(w);
			
			String iw = (String.valueOf(jsondata.get("ideal_weight")));
			BigDecimal idealWeight = new BigDecimal(iw);
			
			String v = (String.valueOf(jsondata.get("variation")));
			BigDecimal variation = new BigDecimal(v);
			//BigDecimal variation = new BigDecimal(String.valueOf(jsondata.get("variation")));
/*			
			long b = (Integer) jsondata.get("bmi");
			BigDecimal bmi = BigDecimal.valueOf(b).movePointLeft(0);*/
			BigDecimal bmi = new BigDecimal(String.valueOf(jsondata.get("bmi")));
			
			String obesityCheck = String.valueOf(jsondata.get("obesity_check"));
			
			if(obesityCheck.equals("y")) {
				opdHeader = (OpdObesityHd)session.get(OpdObesityHd.class, headerId);
				if(opdHeader != null) {
				
				opdHeader.setCloseDate(obesityDate);
				session.update(opdHeader);
				}
			}
			
			OpdObesityHd opdHd = new OpdObesityHd();
			opdHd.setObesityHdId(headerId);
			OpdObesityDt dt = new OpdObesityDt();
			// set input value to entity and save 
			dt.setOpdObesityHd(opdHd);
			dt.setObesityDate(obesityDate);
			dt.setMonth(month);
			dt.setHeight(height);
			dt.setWeight(weight);
			dt.setIdealWeight(idealWeight);
			dt.setVariation(variation);
			dt.setBmi(bmi);
			session.save(dt);
			tx.commit();
			return "Obesity detail updated Successfully";
		} catch (Exception ex) {
			ex.printStackTrace();
			return "Error occured while updating obesity detail";
		} finally {
			session.close();
		}
	}

}
