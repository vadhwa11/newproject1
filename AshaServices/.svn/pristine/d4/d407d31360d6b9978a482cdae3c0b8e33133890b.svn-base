package com.icg.jkt.dao.impl;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.icg.jkt.dao.PatientRegistrationDao;
import com.icg.jkt.entity.AppSetup;
import com.icg.jkt.entity.DoctorRoaster;
import com.icg.jkt.entity.MasAdministrativeSex;
import com.icg.jkt.entity.MasAppointmentSession;
import com.icg.jkt.entity.MasBloodGroup;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasEmployeeDependent;
import com.icg.jkt.entity.MasIdentificationType;
import com.icg.jkt.entity.MasMedicalCategory;
import com.icg.jkt.entity.MasRegistrationType;
import com.icg.jkt.entity.MasServiceType;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.Visit;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.HMSUtil;


@Repository
@Transactional
public class PatientRegistrationDaoImpl implements PatientRegistrationDao{

	@Autowired
	GetHibernateUtils getHibernateUtils;
	


	@SuppressWarnings({ "unchecked"})
	@Override
	public Map<String,Object> findPatientAndDependentFromEmployee(String serviceNo) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasEmployeeDependent> employeeDependentList = new ArrayList<MasEmployeeDependent>();
		
		long selfRelationId= Long.parseLong(HMSUtil.getProperties("adt.properties","SELF_RELATION_ID"));
		
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();

		int i=0;
		patientList = session.createCriteria(Patient.class)
						.add(Restrictions.eq("serviceNo",serviceNo))
						.add(Restrictions.isNotNull("uhidNo")).list();
		
		
		if(patientList.size()>0 && !patientList.isEmpty()) {
			
			Long []relationArray = new Long [patientList.size()];
			for(Patient patient:patientList) {
				relationArray[i] = patient.getMasRelation().getRelationId();
				i++;
			}
			
			boolean contains = Arrays.stream(relationArray).anyMatch(x -> x ==selfRelationId);
			long employeeId = patientList.get(0).getMasEmployee().getEmployeeId();
			
			if(contains)  { //true
				employeeDependentList = session.createCriteria(MasEmployeeDependent.class)
						.add(Restrictions.eq("masEmployee.employeeId", employeeId))
						.add(Restrictions.not(Restrictions.in("masRelation.relationId", relationArray)))
						.list();
			}else { // false
				
				employeeList = session.createCriteria(MasEmployee.class)
						.add(Restrictions.eq("serviceNo",serviceNo))
						.add(Restrictions.eq("status","y"))
						.list();
				employeeDependentList = session.createCriteria(MasEmployeeDependent.class)
						.add(Restrictions.eq("masEmployee.employeeId", employeeId))
						.add(Restrictions.not(Restrictions.in("masRelation.relationId", relationArray)))
						.list();
			}
			
		}
		else {
			employeeList = session.createCriteria(MasEmployee.class)
			.add(Restrictions.eq("serviceNo",serviceNo))
			.add(Restrictions.eq("status","y"))
			.list();
			
			
		}
		

		map.put("patientList", patientList);
		map.put("employeeList", employeeList);
		map.put("employeeDependentList", employeeDependentList);
		return map ;
	}



	@SuppressWarnings("unchecked")
	@Override
	public List<MasDepartment> geDepartmentList() {
		
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		String departmentTypeCode = HMSUtil.getProperties("adt.properties", "DEPARTMENT_TYPE_CODE");
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();

		departmentList=session.createCriteria(MasDepartment.class)
				.add(Restrictions.eq("status","y").ignoreCase())
				.createAlias("masDepartmentType", "dt")
				.add(Restrictions.eq("dt.departmentTypeCode",departmentTypeCode))
				.addOrder(Order.asc("departmentName"))
				.list();
		
		return departmentList;
	}



	@SuppressWarnings("unchecked")
	@Override
	public List<MasBloodGroup> geBloodGroupList() {
		List<MasBloodGroup> bloodGroupList = new ArrayList<MasBloodGroup>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		bloodGroupList= session.createCriteria(MasBloodGroup.class)
				.addOrder(Order.asc("bloodGroupName")).list();
		return bloodGroupList;
	}


	@SuppressWarnings("unchecked")
	@Override
	public List<MasMedicalCategory> getMedicalCategoryList() {
		List<MasMedicalCategory> medicalCategoryList = new ArrayList<MasMedicalCategory>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		medicalCategoryList = session.createCriteria(MasMedicalCategory.class)
				.addOrder(Order.asc("medicalCategoryName")).list();
		return medicalCategoryList;
	}



	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> getTokenNoForDepartmentMultiVisit(String rowId,long departmentId,long hospitalId,long appointmentTypeId) {
		Map<String, Object>map = new HashMap<String, Object>();
		 List<DoctorRoaster> doctorRosterList = new ArrayList<DoctorRoaster>();
		 List<Long>appSession = new ArrayList<Long>();
		 List<Integer>tokenNoList = new ArrayList<Integer>();
		 int tokenNo = 0;
		 String tokenMsg="";
		 Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		 Date today = new Date();
	     String dateString = HMSUtil.convertDateToStringFormat(today, "yyyy-MM-dd");
         Date date= null;
			try {
				date = new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
			} catch (ParseException e1) {
				e1.printStackTrace();
			}    
		
			doctorRosterList =session.createCriteria(DoctorRoaster.class)
								.add(Restrictions.eq("masDepartment.departmentId", departmentId))
								.add(Restrictions.eq("masHospital.hospitalId", hospitalId))
								.add(Restrictions.eq("roasterDate", date))
								.list();
			
			
			if(doctorRosterList.size()>0) {
				 String rosterValues = doctorRosterList.get(0).getRoasterValue();
				 String[] arrayValues = rosterValues.split(",");
				 String appTypeAndValue= "";
				 for(int i=0;i<arrayValues.length;i++) {
					 appTypeAndValue = arrayValues[i];
					 if(appTypeAndValue.substring(appTypeAndValue.lastIndexOf('@')+1).equalsIgnoreCase(String.valueOf(appointmentTypeId))) {
						 
					 appSession = session.createCriteria(MasAppointmentSession.class)
							.add(Restrictions.eq("masHospital.hospitalId", hospitalId))
							.add(Restrictions.eq("masDepartment.departmentId", departmentId))
							.add(Restrictions.eq("masAppointmentType.appointmentTypeId", appointmentTypeId))
							.setProjection(Projections.property("id"))
							.list();
					
					 if(appSession.size()>0) {
						 long appSessionId = appSession.get(0);
						 
						 tokenNoList = session.createCriteria(Visit.class)
						 .add(Restrictions.eq("masAppointmentSession.id", appSessionId)) 
						 .add(Restrictions.eq("masDepartment.departmentId", departmentId))
						 .add(Restrictions.eq("masHospital.hospitalId", hospitalId))
						 .setProjection(Projections.max("tokenNo"))
						 .list();
						 
						 if (tokenNoList.get(0) != null) {
							 tokenNo = tokenNoList.get(0);
							 tokenNo++;
							 
						}
						 else{ //  tokenNoList is null
							 tokenNo = 1;
						 }
					
						 
						 List<AppSetup>setupList = new ArrayList<AppSetup>();				 	
						 String dayName = new SimpleDateFormat("EEEE", Locale.ENGLISH).format(date.getTime());
						
						 setupList=session.createCriteria(AppSetup.class)
								    .add(Restrictions.eq("masHospital.hospitalId", hospitalId)) 
								    .add(Restrictions.eq("masDepartment.departmentId", departmentId))
								    .add(Restrictions.eq("days", dayName))
									.add(Restrictions.eq("masAppointmentSession.id", appSessionId))
									.list();
						 
						
							if(setupList.size()>0)
							{
								if(tokenNo > (setupList.get(0).getTotalToken().intValue()))
								{
									tokenNo = 0;
									tokenMsg="Token is Full for " + "("+ dayName+")";
								}
								else{
										tokenMsg = String.valueOf(tokenNo);
								}
							}
							else
							{
								tokenMsg ="No Appointment Setup";
							}

					}
					 	break;
				}
			}

		}else {
			tokenMsg ="Doctor Roster is not available";
		}
			map.put("tokenMsg",tokenMsg );
			map.put("appointmentTypeId",appointmentTypeId );
		    return map;
	}



	@SuppressWarnings("unchecked")
	@Override
	public List<MasRegistrationType> getRegistrationTypeList() {
		List<MasRegistrationType> masRegistrationTypeList = new ArrayList<MasRegistrationType>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		masRegistrationTypeList = session.createCriteria(MasRegistrationType.class)
				.addOrder(Order.desc("registrationTypeName")).list();
		return masRegistrationTypeList;
	}


	@SuppressWarnings("unchecked")
	@Override
	public List<MasAdministrativeSex> getGenderList() {
		List<MasAdministrativeSex> genderList = new ArrayList<MasAdministrativeSex>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		genderList = session.createCriteria(MasAdministrativeSex.class)
				.addOrder(Order.asc("administrativeSexName")).list();
		return genderList;
	}


	@SuppressWarnings("unchecked")
	@Override
	public List<MasIdentificationType> getIdentificationList() {
		List<MasIdentificationType> identificationTypeList = new ArrayList<MasIdentificationType>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		identificationTypeList = session.createCriteria(MasIdentificationType.class)
				.addOrder(Order.asc("identificationName")).list();
		return identificationTypeList;
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public List<MasServiceType> getServiceTypeList() {
		List<MasServiceType> serviceTypeList = new ArrayList<MasServiceType>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		serviceTypeList = session.createCriteria(MasServiceType.class)
				.addOrder(Order.asc("serviceTypeName")).list();
		return serviceTypeList;
	}


	@SuppressWarnings("unchecked")
	@Override
	public long getPatientFromUhidNo(long uhidNO) {
		List<Patient> patientList =new ArrayList<Patient>(); 
		long patientId=0;
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		patientList =	session.createCriteria(Patient.class)
		.add(Restrictions.eq("uhidNo", uhidNO)).list();
		
		if(patientList.size()>0) {
			patientId=	patientList.get(0).getPatientId();
		}
		
		return patientId;
	}



	@SuppressWarnings("unused")
	@Override
	public long saveVisitForRegisteredPatient(Visit visit) {
	
		long visitId =0;
		
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(Visit.class);
			Transaction tx = session.beginTransaction();
			Serializable id = session.save(visit);
			tx.commit();
			if (id != null) {
				visitId = (long)id;
			} else {
				visitId = 0;
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			e.getMessage();
			e.printStackTrace();
		}
		 
		return visitId;
	}



	@SuppressWarnings("unused")
	@Override
	public long savePatient(Patient patient) {
		long patientId =0;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(Patient.class);
			Transaction tx = session.beginTransaction();
			Serializable id = session.save(patient);
			tx.commit();
			if (id != null) {
				patientId = (long)id;
			} else {
				patientId = 0;
			}
		} catch (Exception e) {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			e.getMessage();
			e.printStackTrace();
		}
		 
		return patientId;
	}

	

}
