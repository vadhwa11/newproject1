package com.icg.jkt.dao.impl;

import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.jdbc.Work;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.fasterxml.jackson.core.JsonGenerator;
import com.icg.jkt.dao.EHRDao;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.HMSUtil;

import oracle.jdbc.OracleTypes;

@Repository
public class EHRDaoImpl implements EHRDao {
	
	@Autowired
	GetHibernateUtils getHibernateUtils;	

	@Override
	public Map<String, Object> getPatientSummary(HashMap<String, Object> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		Map<String,Object> map = new HashMap<>();
		JSONObject object = new JSONObject();
		JSONArray jsArray1 = new JSONArray();
		JSONArray jsArray2 = new JSONArray();
		JSONArray jsArray3 = new JSONArray();
		JSONArray jsArray4 = new JSONArray();
		JSONArray jsArray5 = new JSONArray();
		int patientId = Integer.parseInt(jsondata.get("patient_id").toString());
		int userId = Integer.parseInt(jsondata.get("user_id").toString());
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();	
		
		session.doWork(new Work() {
			@Override
			public void execute(java.sql.Connection connection) throws SQLException {
				System.out.println("connection is "+connection);
				CallableStatement call = connection.prepareCall("CALL ASP_EHR_PATIENT_DATA(?, ?, ?, ?, ?, ?, ?)");
				call.setInt(1, patientId);
				call.setInt(2, userId);
				call.registerOutParameter(3, OracleTypes.CURSOR);
				call.registerOutParameter(4, OracleTypes.CURSOR);
				call.registerOutParameter(5, OracleTypes.CURSOR);
				call.registerOutParameter(6, OracleTypes.CURSOR);
				call.registerOutParameter(7, OracleTypes.CURSOR);
				call.execute();
				ResultSet rs = (ResultSet)call.getObject(3);
				ResultSet rs2 = (ResultSet)call.getObject(4);
				ResultSet rs3 = (ResultSet)call.getObject(5);
				ResultSet rs4 = (ResultSet)call.getObject(6);
				ResultSet rs5 = (ResultSet)call.getObject(7);
				while(rs.next()) {					
					int total_rows = rs.getMetaData().getColumnCount();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs.getMetaData().getColumnLabel(i + 1)
		                .toLowerCase(), HMSUtil.convertNullToEmptyString(rs.getObject(i + 1)));
		            }
		            jsArray1.put(obj);	            
				}
				object.put("ref_cur1", jsArray1);
				while(rs2.next()) {					
					int total_rows = rs2.getMetaData().getColumnCount();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs2.getMetaData().getColumnLabel(i + 1)
		                .toLowerCase(), HMSUtil.convertNullToEmptyString(rs2.getObject(i + 1)));
		            }
		            jsArray2.put(obj);	
				}
				object.put("ref_cur2", jsArray2);
				while(rs3.next()) {					
					int total_rows = rs3.getMetaData().getColumnCount();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs3.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs3.getObject(i + 1)));
		            	}
		            	jsArray3.put(obj);		            	
				}
				object.put("ref_cur3", jsArray3);
				while(rs4.next()) {					
					int total_rows = rs4.getMetaData().getColumnCount();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs4.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs4.getObject(i + 1)));
		            }
		            jsArray4.put(obj);		  
				}
				object.put("ref_cursor4", jsArray4);
				while(rs5.next()) {					
					int total_rows = rs5.getMetaData().getColumnCount();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs5.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs5.getObject(i + 1)));
		            }		        
		            jsArray5.put(obj);		  
				}			
				object.put("ref_cursor5", jsArray5);
			}
		});
		map.put("patient_summary", object);
		return map;
	}
	
	@Override
	public Map<String, Object> getVisitSummary(HashMap<String, Object> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		Map<String,Object> map = new HashMap<>();
		int patientId = Integer.parseInt(jsondata.get("patient_id").toString());
		
		//int userId = 2;
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();	
		JSONObject jsonObject = new JSONObject();
		session.doWork(new Work() {
			@Override
			public void execute(java.sql.Connection connection) throws SQLException {
				System.out.println("connection is "+connection);
				CallableStatement call = connection.prepareCall("CALL ASP_EHR_VISIT_DATA(?, ?, ?, ?, ?, ?)");
				call.setInt(1, patientId);
				call.registerOutParameter(2, OracleTypes.CURSOR);
				call.registerOutParameter(3, OracleTypes.CURSOR);
				call.registerOutParameter(4, OracleTypes.CURSOR);
				call.registerOutParameter(5, OracleTypes.CURSOR);
				call.registerOutParameter(6, OracleTypes.CURSOR);
				call.execute();
				ResultSet rs = (ResultSet)call.getObject(2);
				ResultSet rs2 = (ResultSet)call.getObject(3);
				ResultSet rs3 = (ResultSet)call.getObject(4);
				ResultSet rs4 = (ResultSet)call.getObject(5);
				ResultSet rs5 = (ResultSet)call.getObject(6);
				
				JSONArray jsonArray1 = new JSONArray();
				JSONArray jsonArray2 = new JSONArray();
				JSONArray jsonArray3 = new JSONArray();
				JSONArray jsonArray4 = new JSONArray();
				JSONArray jsonArray5 = new JSONArray();
				
				while(rs.next()) {					
					int total_rows = rs.getMetaData().getColumnCount();
					/*JSONArray jsonArray = new JSONArray();*/
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {
		                
		                obj.put(rs.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs.getObject(i + 1)));
		                
		            }
		            jsonArray1.put(obj);
		           /* jsonArray1.put(jsonArray);
		            jsonObject.put("encounter_details", jsonArray1);*/
				}
				jsonObject.put("encounter_details", jsonArray1);
				while(rs2.next()) {					
					int total_rows = rs2.getMetaData().getColumnCount();
					//JSONArray jsonArray = new JSONArray();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {
		                
		                obj.put(rs2.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs2.getObject(i + 1)));
		                
		            }
		            jsonArray2.put(obj);		           
				}
				jsonObject.put("plan_details", jsonArray2);
				while(rs3.next()) {					
					int total_rows = rs3.getMetaData().getColumnCount();
					//JSONArray jsonArray = new JSONArray();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs3.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs3.getObject(i + 1)));
		             }
		            jsonArray3.put(obj);
		            
				}
				jsonObject.put("current_medication", jsonArray3);
				while(rs4.next()) {					
					int total_rows = rs4.getMetaData().getColumnCount();
					//JSONArray jsonArray = new JSONArray();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs4.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs4.getObject(i + 1)));		                
		            }
		            jsonArray4.put(obj);		            
				}
				jsonObject.put("nursing_care", jsonArray4);
				while(rs5.next()) {					
					int total_rows = rs5.getMetaData().getColumnCount();
					//JSONArray jsonArray = new JSONArray();
					JSONObject obj = new JSONObject();
		            for (int i = 0; i < total_rows; i++) {		                
		                obj.put(rs5.getMetaData().getColumnLabel(i + 1)
		                        .toLowerCase(), HMSUtil.convertNullToEmptyString(rs5.getObject(i + 1)));		                
		            }
		            jsonArray5.put(obj);
		            
				}
				jsonObject.put("recommended_advice", jsonArray5);
				
			}
		});
						
		map.put("visit_summary", jsonObject);
		return map;
	}

}
