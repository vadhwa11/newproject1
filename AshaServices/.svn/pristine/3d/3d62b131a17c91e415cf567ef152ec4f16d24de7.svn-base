package com.icg.jkt.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * The persistent class for the MAS_UNIT database table.
 * 
 */
@Entity
@Table(name = "MAS_UNIT")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class MasUnit implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5010107093035370094L;

	@Id
	@SequenceGenerator(name = "MAS_UNIT_GENERATOR", sequenceName = "MAS_UNIT_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "MAS_UNIT_GENERATOR")
	@Column(name = "UNIT_ID")
	private long unitId;

	@Temporal(TemporalType.DATE)
	@Column(name = "LAST_CHG_DATE")
	private Date lastChgDate;

	@Column(name = "STATUS")
	private String status;

	@Column(name = "UNIT_ADDRESS")
	private String unitAddress;

	@Column(name = "UNIT_NAME")
	private String unitName;

	@Column(name="UNIT_PARENT_ID")
	private long unitParentId;
	// bi-directional many-to-one association to MasEmployee
	@OneToMany(mappedBy = "masUnit1")

	@JsonBackReference
	private List<MasEmployee> masEmployees1;

	// bi-directional many-to-one association to MasEmployee
	@OneToMany(mappedBy = "masUnit2")

	@JsonBackReference
	private List<MasEmployee> masEmployees2;

	// bi-directional many-to-one association to MasHospital
	@OneToMany(mappedBy = "masUnit")

	@JsonBackReference
	private List<MasHospital> masHospitals;

	// bi-directional many-to-one association to MasCommand
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "COMMAND_ID")
	private MasCommand masCommand;

	// bi-directional many-to-one association to MasUnittype
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "UNIT_TYPE_ID")
	private MasUnitType masUnitType;

	// bi-directional many-to-one association to User
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "LAST_CHG_BY")
	private Users user;

	// bi-directional many-to-one association to Patient
	@OneToMany(mappedBy = "masUnit")
	@JsonBackReference
	private List<Patient> patients;

	public MasUnit() {
	}

	public long getUnitId() {
		return this.unitId;
	}

	public void setUnitId(long unitId) {
		this.unitId = unitId;
	}

	public Date getLastChgDate() {
		return this.lastChgDate;
	}

	public void setLastChgDate(Date lastChgDate) {
		this.lastChgDate = lastChgDate;
	}

	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getUnitAddress() {
		return this.unitAddress;
	}

	public void setUnitAddress(String unitAddress) {
		this.unitAddress = unitAddress;
	}

	public String getUnitName() {
		return this.unitName;
	}

	public void setUnitName(String unitName) {
		this.unitName = unitName;
	}

	public List<MasEmployee> getMasEmployees1() {
		return this.masEmployees1;
	}

	public void setMasEmployees1(List<MasEmployee> masEmployees1) {
		this.masEmployees1 = masEmployees1;
	}

	public MasEmployee addMasEmployees1(MasEmployee masEmployees1) {
		getMasEmployees1().add(masEmployees1);
		masEmployees1.setMasUnit1(this);

		return masEmployees1;
	}

	public MasEmployee removeMasEmployees1(MasEmployee masEmployees1) {
		getMasEmployees1().remove(masEmployees1);
		masEmployees1.setMasUnit1(null);

		return masEmployees1;
	}

	public List<MasEmployee> getMasEmployees2() {
		return this.masEmployees2;
	}

	public void setMasEmployees2(List<MasEmployee> masEmployees2) {
		this.masEmployees2 = masEmployees2;
	}

	public MasEmployee addMasEmployees2(MasEmployee masEmployees2) {
		getMasEmployees2().add(masEmployees2);
		masEmployees2.setMasUnit2(this);

		return masEmployees2;
	}

	public MasEmployee removeMasEmployees2(MasEmployee masEmployees2) {
		getMasEmployees2().remove(masEmployees2);
		masEmployees2.setMasUnit2(null);

		return masEmployees2;
	}

	public List<MasHospital> getMasHospitals() {
		return this.masHospitals;
	}

	public void setMasHospitals(List<MasHospital> masHospitals) {
		this.masHospitals = masHospitals;
	}

	public MasHospital addMasHospital(MasHospital masHospital) {
		getMasHospitals().add(masHospital);
		masHospital.setMasUnit(this);

		return masHospital;
	}

	public MasHospital removeMasHospital(MasHospital masHospital) {
		getMasHospitals().remove(masHospital);
		masHospital.setMasUnit(null);

		return masHospital;
	}

	public MasCommand getMasCommand() {
		return this.masCommand;
	}

	public void setMasCommand(MasCommand masCommand) {
		this.masCommand = masCommand;
	}

	public MasUnitType getMasUnittype() {
		return this.masUnitType;
	}

	public void setMasUnittype(MasUnitType masUnitType) {
		this.masUnitType = masUnitType;
	}

	public Users getUser() {
		return this.user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public List<Patient> getPatients() {
		return this.patients;
	}

	public void setPatients(List<Patient> patients) {
		this.patients = patients;
	}

	public Patient addPatient(Patient patient) {
		getPatients().add(patient);
		patient.setMasUnit(this);

		return patient;
	}

	public Patient removePatient(Patient patient) {
		getPatients().remove(patient);
		patient.setMasUnit(null);

		return patient;
	}

	public long getUnitParentId() {
		return unitParentId;
	}

	public void setUnitParentId(long unitParentId) {
		this.unitParentId = unitParentId;
	}

	public MasUnitType getMasUnitType() {
		return masUnitType;
	}

	public void setMasUnitType(MasUnitType masUnitType) {
		this.masUnitType = masUnitType;
	}

}