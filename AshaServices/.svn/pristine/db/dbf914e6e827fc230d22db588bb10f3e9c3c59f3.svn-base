package com.icg.jkt.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.icg.jkt.dao.PatientRegistrationDao;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasEmployeeDependent;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.service.PatientRegistrationService;
import com.icg.jkt.utils.HMSUtil;



@Service("PatientRegistrationService")
public class PatientRegistrationServiceImpl implements PatientRegistrationService{

	@Autowired
	PatientRegistrationDao patientRegistrationDao;


	@SuppressWarnings("unchecked")
	@Override
	public Map<String, Object> findPatientAndDependentFromEmployee(Map<String, String> requestData) {
		Map<String, Object> map = new HashMap<String, Object>();
		Map<String, Object> patientListofEmpAndDependent = new HashMap<String, Object>();
		Map<Integer, Map<String, Object>> data = new HashMap<Integer, Map<String, Object>>();
		List<Patient> existingPatientList= new ArrayList<Patient>();
		List<MasEmployee> empAndDependentPatientList= new ArrayList<MasEmployee>();
		List<MasEmployeeDependent> dependentPatientList= new ArrayList<MasEmployeeDependent>();
		
		Date dateOfBirth = null;
		int age = 0;

		String name = "";
		String relation = "";
		String gender = "";

		String serviceNo = "";
		long relationId = 0;
		
		
		if (!requestData.isEmpty() && requestData != null ) {
			if (requestData.get("serviceNo") != null && !requestData.get("serviceNo").isEmpty()) {
				serviceNo = requestData.get("serviceNo");
				patientListofEmpAndDependent = patientRegistrationDao.findPatientAndDependentFromEmployee(serviceNo);
				
				if(patientListofEmpAndDependent.size()>0 && !patientListofEmpAndDependent.isEmpty()) {
					
					existingPatientList = (List<Patient>)patientListofEmpAndDependent.get("patientList");
					if(!existingPatientList.isEmpty() && existingPatientList.size()>0) {
						int rowCount=0;
						for(Patient patient : existingPatientList) {

							Map<String, Object> responsePatientMap = new HashMap<String, Object>();
							String patientName = "";
							if (patient.getPatientName() != null) {
								patientName = patient.getPatientName();
							}
							
							name = patientName;
							age = HMSUtil.calculateAgeNoOfYear(patient.getDateOfBirth());
							gender = patient.getMasAdministrativeSex().getAdministrativeSexName();
							dateOfBirth = patient.getDateOfBirth();
							relation = patient.getMasRelation().getRelationName();
							relationId=patient.getMasRelation().getRelationId();
							System.out.println("patient id: " + patient.getPatientId());
							responsePatientMap.put("Id", patient.getPatientId());
							responsePatientMap.put("name", name);
							responsePatientMap.put("age", age);
							responsePatientMap.put("gender", gender);
							responsePatientMap.put("dateOfBirth", dateOfBirth);
							responsePatientMap.put("relation", relation);
							responsePatientMap.put("relationId", relationId);
							data.put(++rowCount, responsePatientMap);
							
							
						}
						
						dependentPatientList = (List<MasEmployeeDependent>)patientListofEmpAndDependent.get("employeeDependentList");
						if(!dependentPatientList.isEmpty() && dependentPatientList.size()>0  ) {
							for(MasEmployeeDependent depList :dependentPatientList ) {
								

								Map<String, Object> responseDepMap = new HashMap<String, Object>();
								String depPatientName = "";
								if (depList.getEmployeeDependentFName() != null) {
									depPatientName = depList.getEmployeeDependentFName();
								}

								if (depList.getEmployeeDependentMName() != null) {
									depPatientName = depPatientName + " "
											+ depList.getEmployeeDependentMName();
								}
								if (depList.getEmployeeDependentLName()!= null) {
									depPatientName = depPatientName + " "
											+ depList.getEmployeeDependentLName();
							 
									}
								name = depPatientName;
								age = HMSUtil.calculateAgeNoOfYear(depList.getDateOfBirth());
								gender = depList.getMasAdministrativeSex().getAdministrativeSexName();
								dateOfBirth = depList.getDateOfBirth();
								relation = depList.getMasRelation().getRelationName();
								relationId=depList.getMasRelation().getRelationId();
								System.out.println("dep emp id: " + depList.getEmployeeDependentId());
								responseDepMap.put("Id", depList.getEmployeeDependentId());
								responseDepMap.put("name", name);
								responseDepMap.put("age", age);
								responseDepMap.put("gender", gender);
								responseDepMap.put("dateOfBirth", dateOfBirth);
								responseDepMap.put("relation", relation);
								responseDepMap.put("relationId", relationId);
								data.put(++rowCount, responseDepMap);

							
								
							}
						}
						
						
						empAndDependentPatientList = (List<MasEmployee>)patientListofEmpAndDependent.get("employeeList");
							if(!empAndDependentPatientList.isEmpty() && empAndDependentPatientList.size()>0  ) {
							for(MasEmployee ms : empAndDependentPatientList) {

								
								relation =  HMSUtil.getProperties("adt.properties", "SELF_RELATION");
								relationId =  Long.parseLong(HMSUtil.getProperties("adt.properties", "SELF_RELATION_ID"));
								
								Map<String, Object> responseEmpMap = new HashMap<String, Object>();
								String patientName = "";
								if (ms.getFirstName() != null) {
									patientName = ms.getFirstName();
								}

								if (ms.getMiddleName() != null) {
									patientName = patientName + " "
											+ ms.getMiddleName();
								}
								if (ms.getLastName() != null) {
									patientName = patientName + " "
											+ ms.getLastName();
							 
									}
								name = patientName;
								age = HMSUtil.calculateAgeNoOfYear(ms.getDateOfBirth());
								gender = ms.getMasAdministrativeSex().getAdministrativeSexName();
								dateOfBirth = ms.getDateOfBirth();
								
								System.out.println("emp id: " + ms.getEmployeeId());
								responseEmpMap.put("Id", ms.getEmployeeId());
								responseEmpMap.put("name", name);
								responseEmpMap.put("age", age);
								responseEmpMap.put("gender", gender);
								responseEmpMap.put("dateOfBirth", dateOfBirth);
								responseEmpMap.put("relation", relation);
								responseEmpMap.put("relationId", relationId);
								data.put(++rowCount, responseEmpMap);
							}
						}
							map.put("data", data);
							map.put("count", data.size());
							map.put("msg","List of Detail");
							map.put("status", "1");
							return map;
							
					}else {
						empAndDependentPatientList = (List<MasEmployee>)patientListofEmpAndDependent.get("employeeList");
						int rowCount=0;
						for (MasEmployee ms : empAndDependentPatientList) {
							
							relation =  HMSUtil.getProperties("adt.properties", "SELF_RELATION");
							relationId =  Long.parseLong(HMSUtil.getProperties("adt.properties", "SELF_RELATION_ID"));
							
							Map<String, Object> responseEmpMap = new HashMap<String, Object>();
							String patientName = "";
							if (ms.getFirstName() != null) {
								patientName = ms.getFirstName();
							}

							if (ms.getMiddleName() != null) {
								patientName = patientName + " "
										+ ms.getMiddleName();
							}
							if (ms.getLastName() != null) {
								patientName = patientName + " "
										+ ms.getLastName();
						 
								}
							name = patientName;
							age = HMSUtil.calculateAgeNoOfYear(ms.getDateOfBirth());
							gender = ms.getMasAdministrativeSex().getAdministrativeSexName();
							dateOfBirth = ms.getDateOfBirth();
							
							System.out.println("emp id: " + ms.getEmployeeId());
							responseEmpMap.put("Id", ms.getEmployeeId());
							responseEmpMap.put("name", name);
							responseEmpMap.put("age", age);
							responseEmpMap.put("gender", gender);
							responseEmpMap.put("dateOfBirth", dateOfBirth);
							responseEmpMap.put("relation", relation);
							responseEmpMap.put("relationId", relationId);
							data.put(++rowCount, responseEmpMap);

							List<MasEmployeeDependent> dependentList = ms.getMasEmployeeDependents();
							if (!dependentList.isEmpty()) {

								for (MasEmployeeDependent depList : dependentList) {
									Map<String, Object> responseDepMap = new HashMap<String, Object>();
									String depPatientName = "";
									if (depList.getEmployeeDependentFName() != null) {
										depPatientName = depList.getEmployeeDependentFName();
									}

									if (depList.getEmployeeDependentMName() != null) {
										depPatientName = depPatientName + " "
												+ depList.getEmployeeDependentMName();
									}
									if (depList.getEmployeeDependentLName()!= null) {
										depPatientName = depPatientName + " "
												+ depList.getEmployeeDependentLName();
								 
										}
									name = depPatientName;
									age = HMSUtil.calculateAgeNoOfYear(depList.getDateOfBirth());
									gender = depList.getMasAdministrativeSex().getAdministrativeSexName();
									dateOfBirth = depList.getDateOfBirth();
									relation = depList.getMasRelation().getRelationName();
									relationId=depList.getMasRelation().getRelationId();
									System.out.println("dep emp id: " + depList.getEmployeeDependentId());
									responseDepMap.put("Id", depList.getEmployeeDependentId());
									responseDepMap.put("name", name);
									responseDepMap.put("age", age);
									responseDepMap.put("gender", gender);
									responseDepMap.put("dateOfBirth", dateOfBirth);
									responseDepMap.put("relation", relation);
									responseDepMap.put("relationId", relationId);
									data.put(++rowCount, responseDepMap);

								}
							}
							map.put("data", data);
							map.put("count", data.size());
							map.put("msg","List of Detail");
							map.put("status", "1");
							return map;
						}
					}
				}
			}
		}
		map.put("msg","Service No does not exist.");
		map.put("count", data.size());
		map.put("status", "0");
		return map;
	}	
		
		
	
	
}
