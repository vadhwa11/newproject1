package com.icg.jkt.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.icg.jkt.dao.AppointmentDAO;
import com.icg.jkt.entity.AppSetup;
import com.icg.jkt.entity.MasAppointmentSession;
import com.icg.jkt.entity.MasAppointmentType;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasHospital;
import com.icg.jkt.entity.Users;
import com.icg.jkt.service.AppointmentService;

@Service("AppointmentService")
public class AppointmentServiceImpl implements AppointmentService{
	
	@Autowired
	AppointmentDAO appointmentDAO;

	@Override
	public Map<String, Object> getRecordsForDoctorAppointment() {
		Map<String, Object> responseMap = new HashMap<String, Object>();
		responseMap = appointmentDAO.getRecordsForDoctorAppointment();
		if (responseMap.size() > 0) {
			responseMap.put("status",1);
		}else {
			responseMap.put("status",0);
		}
		return responseMap;
	}

	
	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> getlocationWiseAppointmentType(Map<String, String> requestData) {
		Map<String, Object> responseMap = new HashMap<String, Object>();
		long departmentId = Long.parseLong(requestData.get("deptId"));
		responseMap = appointmentDAO.getlocationWiseAppointmentType(departmentId);
		List<MasAppointmentSession> masAppointmentSession =(List<MasAppointmentSession>) responseMap.get("appointmentTypeList");
		if (masAppointmentSession.size() > 0) {
			responseMap.put("status",1);
		}else {
			responseMap.put("status",0);
		}
		return responseMap;
	}
	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> getappointmentSetupDetails(Map<String, String> requestData) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		long appointmentTypeId=0;
		long deptId=0;
		if (!requestData.isEmpty() && requestData != null ) {

			if (requestData.get("deptId") != null && !requestData.get("deptId").isEmpty()) {
				deptId=Long.parseLong(requestData.get("deptId"));
			}
			if(requestData.get("appointmentTypeId") != null && !requestData.get("appointmentTypeId").isEmpty()) {
				appointmentTypeId=Long.parseLong(requestData.get("appointmentTypeId"));
			}
			resultMap = appointmentDAO.getappointmentSetupDetails(deptId,appointmentTypeId);
			List<AppSetup> appSetUpList =(List<AppSetup>) resultMap.get("appSetupList");
		if(appSetUpList.size()>0) {
				resultMap.put("status", 1);
			}
		else {
				resultMap.put("status", 0);
			}
		return resultMap;
		}
		return resultMap;
	}


	@Override
	public String submitAppointmentSetup(String requestData) {
		JSONObject json = new JSONObject();
		JSONObject jObject = new JSONObject(requestData);
		JSONObject jsonobjData = jObject.getJSONObject("appSetupData");
		
		
		JSONArray appointment = jsonobjData.getJSONArray("appointment");
		JSONArray days = jsonobjData.getJSONArray("days");
		JSONArray tokenStart= jsonobjData.getJSONArray("TokenStart");
		JSONArray tokenInterval= jsonobjData.getJSONArray("TokenInterval");
		JSONArray totalToken= jsonobjData.getJSONArray("TotalToken");
		JSONArray totalOnlineToken= jsonobjData.getJSONArray("TotalOnlineToken");
		JSONArray maxDays= jsonobjData.getJSONArray("maxdays");
		JSONArray minDays= jsonobjData.getJSONArray("maxdays");
		
		long departmentId = Long.parseLong(jsonobjData.getString("department"));
		long appSessionTypeId = Long.parseLong(jsonobjData.getString("appointmentType"));
		long hospitalId= 1; // This hospital Id must be come from session
		
		String resp="";
		
		// below code 
		for(int i=0;i<appointment.length();i++) {
			// check null condition and row count value 
			AppSetup appSetup =null;
			if(appointment.get(i).equals(""))
			{
				appSetup	= new AppSetup();
			}
			else
			{
				appSetup = appointmentDAO.getAppSetupObject(Long.parseLong((String) appointment.get(i)));
			}
			
				appSetup.setDays((String)days.get(i));
				
				if(!tokenStart.get(i).toString().isEmpty()) {
					appSetup.setStartToken((new BigDecimal((String)tokenStart.get(i))));
				}
				if(!totalToken.get(i).toString().isEmpty()) {
					appSetup.setTotalToken((new BigDecimal((String)totalToken.get(i))));
				}
				
				if(!tokenInterval.get(i).toString().isEmpty()) {
					appSetup.setTotalInterval((new BigDecimal((String)tokenInterval.get(i))));
				}
			
				if(!totalOnlineToken.get(i).toString().isEmpty()) {
					appSetup.setTotalOnlineToken((new BigDecimal((String)totalOnlineToken.get(i))));
				}
				
				if(!maxDays.get(i).toString().isEmpty()) {
					appSetup.setMaxNoOfDays((new BigDecimal((String)maxDays.get(i))));
				}
				
				if(!minDays.get(i).toString().isEmpty()) {
					appSetup.setMinNoOfDays((new BigDecimal((String)minDays.get(i))));
				}
				
				

				/*
				 * if (null != breakFromTime3.get(i) && !breakFromTime3.get(i).equals(""))
				 * appSetup.setTotalToken(Integer.parseInt((String) breakFromTime3.get(i)));
				 * 
				 * if (null != TotalOnlineToken.get(i) && !TotalOnlineToken.get(i).equals(""))
				 * appSetup.setTotalOnlineToken(Integer.parseInt((String)
				 * TotalOnlineToken.get(i)));
				 * 
				 * if (null != breakToTime2.get(i) && !breakToTime2.get(i).equals(""))
				 * appSetup.setTotalInterval(Integer.parseInt((String) breakToTime2.get(i)));
				 * 
				 * if (null != breakFromTime2.get(i) && !breakFromTime2.get(i).equals(""))
				 * appSetup.setStartToken(Integer.parseInt((String) breakFromTime2.get(i))); if
				 * (!maxDays.get(i).equals("") && maxDays.get(i) != null) {
				 * appSetup.setMaxNoOfDays(Integer.parseInt((String) maxDays.get(i))); } else {
				 * appSetup.setMaxNoOfDays(0); }
				 * 
				 * if (!minDays.get(i).equals("") && minDays.get(i) != null) {
				 * appSetup.setMinNoOfDays(Integer.parseInt((String) minDays.get(i))); } else {
				 * appSetup.setMinNoOfDays(0); }
				 */
				
				

				MasDepartment masDepartment = new MasDepartment();
				masDepartment.setDepartmentId(departmentId);
				appSetup.setMasDepartment(masDepartment);

				

				if (appSessionTypeId != 0) {
					MasAppointmentSession masAppSession = new MasAppointmentSession();
					masAppSession.setId(appSessionTypeId);
					appSetup.setMasAppointmentSession(masAppSession);;

				}

				MasHospital masHospital = new MasHospital();
				masHospital.setHospitalId(hospitalId);
				appSetup.setMasHospital(masHospital);

				// saving user data is pending in this method
				 Users user = new Users();
				 long usr =2L; // This data also come from session 
				 user.setUserId(usr);
				 appSetup.setUser(user);
				
			 resp= appointmentDAO.saveAppointmentSetup(appSetup);
			
		}
		if (resp != null && resp.equalsIgnoreCase("200")) {
			json.put("msg", "Appointment saved successfully ");
			json.put("status", "1");
		} else if (resp != null && resp.equalsIgnoreCase("403")) { //currently not using this else if loop but make it useful
			json.put("msg", " you are not authorized for this activity ");
			json.put("status", "0");
		} else {
			resp ="Appointment not saved successfully";
			json.put("msg", resp);
			json.put("status", "0");
		}
		return json.toString();
	}


	@Override
	public Map<String, Object> getAppointmentSessionDetails() {
		Map<String,Object>map = new HashMap<String, Object>();
		List<MasHospital> hospitalList = new ArrayList<MasHospital>();
		List<MasDepartment> departmentList = new ArrayList<MasDepartment>();
		List<MasAppointmentType> appointmentTypeList = new ArrayList<MasAppointmentType>();
		
		hospitalList=appointmentDAO.getHospitalList();
		departmentList=appointmentDAO.getDepartmentList();
		appointmentTypeList=appointmentDAO.getAppointmentTypeList();
		
		
		map.put("hospitalList", hospitalList);
		map.put("departmentList", departmentList);
		map.put("appointmentTypeList", appointmentTypeList);
		
		return map;
	}

	@Override
	public String submitAppointmentSession(String requestData) {
		System.out.println("Server side requestData" +requestData);
		JSONObject json = new JSONObject(requestData);
		JSONObject jsonObj = new JSONObject(requestData);
		
		String resp="";
		MasAppointmentSession appointmentSession = new MasAppointmentSession();
		
		if(jsonObj.getLong("departmentId")!=0) {
			long departmentId= jsonObj.getLong("departmentId");
			MasDepartment md = new MasDepartment();
			md.setDepartmentId(departmentId);
			appointmentSession.setMasDepartment(md);
			
		}
		
		if(jsonObj.getLong("appointmentTypeId")!=0) {
			long appointmentTypeId =jsonObj.getLong("appointmentTypeId");
			MasAppointmentType appType = new MasAppointmentType();
			appType.setAppointmentTypeId(appointmentTypeId);
			appointmentSession.setMasAppointmentType(appType);
		}
		
		if(jsonObj.getLong("hospitalId")!=0) {
			long hospitalId=jsonObj.getLong("hospitalId");
			MasHospital hospital = new MasHospital();
			hospital.setHospitalId(hospitalId);
			appointmentSession.setMasHospital(hospital);
		}
		
		if(!jsonObj.getString("startTime").isEmpty()) {
			String startTime =jsonObj.getString("startTime");
			appointmentSession.setFromTime(startTime);
		}
		
		if(!jsonObj.getString("endTime").isEmpty()) {
			String endTime=jsonObj.getString("endTime");
			appointmentSession.setToTime(endTime);
		}
		
		
		
		resp= appointmentDAO.submitAppointmentSession(appointmentSession);
		
		if (resp != null && resp.equalsIgnoreCase("200")) {
			json.put("msg", "Appointment Session saved successfully ");
			json.put("status", "1");
		} else {
			resp ="Appointment Session not saved successfully";
			json.put("msg", resp);
			json.put("status", "0");
		}
		return json.toString();
	}
	
}
