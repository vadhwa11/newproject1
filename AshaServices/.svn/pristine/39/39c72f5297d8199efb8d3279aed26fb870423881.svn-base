package com.icg.jkt.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.apache.commons.collections.CollectionUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.icg.jkt.dao.DgOrderhdDao;
import com.icg.jkt.entity.DgMasInvestigation;
import com.icg.jkt.entity.DgOrderdt;
import com.icg.jkt.entity.DgOrderhd;
import com.icg.jkt.entity.DischargeIcdCode;
import com.icg.jkt.entity.MasIcd;
import com.icg.jkt.entity.OpdObesityDt;
import com.icg.jkt.entity.OpdObesityHd;
import com.icg.jkt.entity.OpdPatientDetail;
import com.icg.jkt.entity.OpdPatientHistory;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.PatientPrescriptionDt;
import com.icg.jkt.entity.PatientPrescriptionHd;
import com.icg.jkt.entity.ReferralPatientDt;
import com.icg.jkt.entity.ReferralPatientHd;
import com.icg.jkt.hibernateutils.GetHibernateUtils;

@Repository
@Transactional
public class DgOrderhdImpl implements DgOrderhdDao{
	
	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Override
	public List<Object[]> getDgMasInvestigations(Long visitId) {
		List<DgMasInvestigation>  listDgMasInvestigation =null;
		Transaction transation=null;
		 List<Object[]> listObject=null;
		try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		transation=session.beginTransaction();
		 StringBuilder sbQuery = new StringBuilder();
		    sbQuery.append(" select dgmas.INVESTIGATION_ID,dgmas.INVESTIGATION_NAME,ohd.ORDERHD_ID,odt.LAB_MARK,odt.urgent,odt.ORDER_DATE, ohd.VISIT_ID,ohd.OTHER_INVESTIGATION,");
		    		sbQuery.append( "ohd.DEPARTMENT_ID,ohd.HOSPITAL_ID,odt.ORDERDT_ID from  DG_ORDER_HD ohd ");
		    sbQuery.append(" join DG_ORDER_DT odt on  ohd.orderhd_id=odt.orderhd_id join DG_MAS_INVESTIGATION "); 
		    sbQuery.append(" dgmas on dgmas.INVESTIGATION_ID=odt.INVESTIGATION_ID "); 
		    sbQuery.append(" where ohd.VISIT_ID =:visitId ");
		    Query query = session.createSQLQuery(sbQuery.toString());

		    query.setParameter("visitId", visitId);

		     listObject = query.list();
		transation.commit();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		
		}
		return listObject;
	}

	@Override
	public List<Object[]> getTreatementDetail(Long visitId) {
		Transaction transation=null;
		 List<Object[]> listObject=null;
		try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		transation=session.beginTransaction();
		 StringBuilder sbQuery = new StringBuilder();
		    sbQuery.append(" select msi.nomenclature,msi.ITEM_ID,mf.FREQUENCY_ID,mf.FREQUENCY_NAME,mf.FREQUENCY_CODE," );
		    sbQuery.append("ppdt.NO_OF_DAYS,ppdt.dosage,pphd.PRESCRIPTION_HD_ID,ppdt.PRESCRIPTION_DT_ID,ppdt.DISP_STOCK,ppdt.total,ppdt.instruction,ppdt.STORE_STOCK, msu.STORE_UNIT_NAME,msi.PVMS_NO from ");
		    sbQuery.append(" PATIENT_PRESCRIPTION_HD pphd join PATIENT_PRESCRIPTION_DT ppdt on pphd.PRESCRIPTION_HD_ID=ppdt.PRESCRIPTION_HD_ID "); 
		    sbQuery.append(" join MAS_STORE_ITEM msi on msi.ITEM_ID =ppdt.ITEM_ID join MAS_STORE_UNIT msu on msu.STORE_UNIT_ID=msi.DISP_UNIT_ID ");
		    sbQuery.append("  join MAS_FREQUENCY mf on mf.FREQUENCY_ID=ppdt.FREQUENCY_ID");
		    sbQuery.append(" where pphd.VISIT_ID =:visitId ");
		    Query query = session.createSQLQuery(sbQuery.toString());

		    query.setParameter("visitId", visitId);

		     listObject = query.list();
		
		transation.commit();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		
		}
		return listObject;
	}

	 public Map<String,Object> getDgOrderDtByOrderHdIdAndInvestigationId(List<String> orderhdIds, List<String> investigationIds ){
		Session session=null;
		List<String>listDgMasInvestigation=null;
		List<DgOrderdt>listDgOrderDt=null;
		Map<String,Object>hashMapDgMasInvestigation=null;
		 try {
			 session= getHibernateUtils.getHibernateUtlis().OpenSession();
			 Criteria criteria=session.createCriteria(DgOrderdt.class).add(Restrictions.in("ORDERHD_ID", orderhdIds)).add(Restrictions.in("INVESTIGATION_ID", investigationIds))
			 .setProjection(
			            Projections.projectionList().add(Projections.property("INVESTIGATION_ID"))) ;
		 listDgMasInvestigation=criteria.list();
		 
		 Criteria masCriteria=session.createCriteria(DgOrderdt.class).add(Restrictions.in("ORDERHD_ID", orderhdIds)).add(Restrictions.in("INVESTIGATION_ID", investigationIds));
		 listDgOrderDt=criteria.list();
		 
		 hashMapDgMasInvestigation=new HashMap<>();
		 hashMapDgMasInvestigation.put("listDgMasInvestigation", listDgMasInvestigation);
		 hashMapDgMasInvestigation.put("listDgOrderDt", listDgOrderDt);
		 } 
		 catch(Exception e) {
			 e.printStackTrace();
		 }finally {
				getHibernateUtils.getHibernateUtlis().CloseConnection();
		 }
		 return hashMapDgMasInvestigation;
	 }

	@Override
	public DgOrderdt getDgOrderDtByDgOrderdtId(Long dgOrderDtId) {
		DgOrderdt dgOrderdt=null;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			
			dgOrderdt=(DgOrderdt) session.get(DgOrderdt.class, dgOrderDtId);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return dgOrderdt;
	}

	@Override
	public Long saveOrUpdateDgOrderdt(DgOrderdt dgOrderDt) {
		Session session=null;
		Long dgOrderDtId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(dgOrderDt);
			dgOrderDtId=dgOrderDt.getOrderdtId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			 
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return dgOrderDtId;
	}
	
	@Override
	public Long saveOrUpdateDgOrderHd(DgOrderhd dgOrderhd) {
		Session session=null;
		Long dgOrderhdId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(dgOrderhd);
			dgOrderhdId=dgOrderhd.getOrderhdId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			 
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return dgOrderhdId;
	}
	
	@Override
	public Long saveOrUpdatePatient(Patient patient) {
		Session session=null;
		Long patientId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(patient);
			patientId=patient.getPatientId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return patientId;
	}
	@Override
	public Long updatePatientHistory(OpdPatientHistory opdPatientHistory) {
		Session session=null;
		Long patientHistoryId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(opdPatientHistory);
			patientHistoryId=opdPatientHistory.getOpdPatientHistoryId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return patientHistoryId;
	}

	@Override
	public Long updateOpdPatientDetail(OpdPatientDetail opdPatientDetail) {
		Long opdPatientDetailId=null;
		Session session=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(opdPatientDetail);
			opdPatientDetailId=opdPatientDetail.getOpdPatientDetailsId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return opdPatientDetailId;
	}

	
	@Override
	public List<OpdPatientHistory> getPatientHistoryList(Long visitId) {
		List<OpdPatientHistory>opdPatientHistoryList=null;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			opdPatientHistoryList =session.createCriteria(OpdPatientHistory.class).add(Restrictions.eq("visitId", visitId)).list();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return opdPatientHistoryList;
	}

	@Override
	public PatientPrescriptionDt getMasStoreItemByPatientPrecriptionDtId(Long patientPrecriptionDtId) {
		PatientPrescriptionDt patientPrescriptionDt=null;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			
			patientPrescriptionDt=(PatientPrescriptionDt) session.get(PatientPrescriptionDt.class, patientPrecriptionDtId);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return patientPrescriptionDt;
		
	}
	
	@Override
	public Long saveOrUpdatePatientPrecriptionDt(PatientPrescriptionDt patientPrescriptionDt) {
		Session session=null;
		Long patientPrecriptiondtId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(patientPrescriptionDt);
			patientPrecriptiondtId=patientPrescriptionDt.getPrescriptionDtId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return patientPrecriptiondtId;
	}

	@Override
	public List<Object[]> getReferralPatientDtList(Long opdPatientDetailId) {
		 List<Object[]>listReferralPatientDt=null;
		 try {
			 Session session=getHibernateUtils.getHibernateUtlis().OpenSession();
			 StringBuilder sbQuery = new StringBuilder();
			 
			    sbQuery.append(" select masEmpHos.EMPANELLED_HOSPITAL_ID,masEmpHos.EMPANELLED_HOSPITAL_NAME,masDepart.DEPARTMENT_ID, " );
			    sbQuery.append(" masDepart.DEPARTMENT_NAME,masIcd.ICD_ID,masIcd.ICD_NAME,refdt.instruction,refdt.REFREAL_DT_ID,refhd.REFREAL_HD_ID,refdt.EXT_DEPARTMENT,masIcd.ICD_CODE,refhd.REFERRAL_NOTE,refhd.REFERRAL_INI_DATE from ");
			    sbQuery.append(" REFERRAL_PATIENT_DT refdt  join REFERRAL_PATIENT_HD refhd on refhd.REFREAL_HD_ID=refdt.REFREAL_HD_ID "); 
			    sbQuery.append(" left join MAS_EMPANELLED_HOSPITAL masEmpHos on masEmpHos.EMPANELLED_HOSPITAL_ID=refhd.EXT_HOSPITAL_ID left join MAS_ICD masIcd on masIcd.ICD_ID=refdt.DIAGNOSIS_ID ");
			    sbQuery.append(" left join MAS_DEPARTMENT masDepart on masDepart.DEPARTMENT_ID =refdt.INT_DEPARTMENT_ID ");
			    sbQuery.append(" where refhd.OPD_PATIENT_DETAILS_ID =:OPD_PATIENT_DETAILS_ID ");
			    Query query = session.createSQLQuery(sbQuery.toString());

			    query.setParameter("OPD_PATIENT_DETAILS_ID", opdPatientDetailId);

			    listReferralPatientDt = query.list();
		 }
		 catch(Exception e) {
			 e.printStackTrace();
		 }
		 finally {
			 getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		 
		 return listReferralPatientDt;
	}
	
	@Override
	public ReferralPatientDt getReferralPatientDtByReferaldtId(Long referalDtId) {
		ReferralPatientDt referralPatientDt=null;
 
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
 
			referralPatientDt=(ReferralPatientDt) session.createCriteria(ReferralPatientDt.class)
					.add(Restrictions.eq("refrealDtId", referalDtId)).uniqueResult();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return referralPatientDt;
	}
	
	@Override
	public ReferralPatientHd getPatientReferalHdByExtHospitalId(Long extHospitalId,Long opdPatientDetailId) {
		ReferralPatientHd referralPatientHd=null;
		List<ReferralPatientHd>listReferralPatientHd=null;
		Transaction tx=null;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			Criteria criteria = session.createCriteria(ReferralPatientHd.class).
					add(Restrictions.eq("extHospitalId", extHospitalId))
					.add(Restrictions.eq("opdPatientDetailsId", opdPatientDetailId)) ;
			listReferralPatientHd=criteria.list();
			
			if(CollectionUtils.isNotEmpty(listReferralPatientHd)) {
				referralPatientHd=listReferralPatientHd.get(0);
			}
			 tx.commit();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return referralPatientHd;
	}
	
	@Override
	public Long saveOrUpdateReferalDt(ReferralPatientDt referralPatientDt) {
		Session session=null;
		Long patientReferalDtId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(referralPatientDt);
			patientReferalDtId=referralPatientDt.getRefrealDtId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return patientReferalDtId;
	}
	
	@Override
	public Long saveOrUpdateReferalHd(ReferralPatientHd referralPatientHd) {
		Session session=null;
		Long patientReferalHdId=null;
		Transaction tx=null;
		try{
			session= getHibernateUtils.getHibernateUtlis().OpenSession();
			tx=session.beginTransaction();
			session.saveOrUpdate(referralPatientHd);
			patientReferalHdId=referralPatientHd.getRefrealHdId();
			session.flush();
	        session.clear();
			tx.commit();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
			
			}
		return patientReferalHdId;
	}

	public String  deleteInvestigatRow(Long dgOrderDt, String flag) {
		Session session = null;
		String status="";
		try {
			session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Object object = null;
			if (flag.equalsIgnoreCase("1")) {
				object = session.get(DgOrderdt.class, dgOrderDt);
				DgOrderdt dgOrderdt = (DgOrderdt) object;
			
				if (dgOrderdt != null) {
					//session.delete(dgOrderdt);
					DgOrderhd dgOrderHd=dgOrderdt.getDgOrderhd();
					
					status=deleteObject("DgOrderdt","orderdtId",  dgOrderdt.getOrderdtId());
					
					List<Long>listDgOrderdt=getDgOrderDtByDgOrderHtId(dgOrderHd.getOrderhdId());
					
					if(CollectionUtils.isEmpty(listDgOrderdt)  && dgOrderHd!=null) {
						status=deleteObject("DgOrderhd","orderhdId",  dgOrderHd.getOrderhdId());
					}
				}
				
				
			}
			
			if (flag.equalsIgnoreCase("2")) {
				object = session.get(PatientPrescriptionDt.class, dgOrderDt);
				PatientPrescriptionDt patientPrescriptionDt = (PatientPrescriptionDt) object;
				if (patientPrescriptionDt != null) {
					//session.delete(patientPrescriptionDt);
					Long  patientPrescriptionHdId=patientPrescriptionDt.getPrescriptionHdId();
					status=deleteObject("PatientPrescriptionDt","prescriptionDtId",  patientPrescriptionDt.getPrescriptionDtId());
					
					List<Long>listDgOrderdt= getPatientPrescriptionHdId(patientPrescriptionHdId) ;
					if(CollectionUtils.isEmpty(listDgOrderdt) && patientPrescriptionHdId!=null) {
						status=deleteObject("PatientPrescriptionHd","prescriptionHdId", patientPrescriptionHdId);
					}
				}
			}
			
			if (flag.equalsIgnoreCase("3")) {
				object = session.get(ReferralPatientDt.class, dgOrderDt);
				
				ReferralPatientDt referralPatientDt = (ReferralPatientDt) object;

				Long referalPatientHd = referralPatientDt.getRefrealHdId();
				
				if (referralPatientDt != null) {
					//session.delete(referralPatientDt);
					ReferralPatientHd referralPatientHd= referralPatientDt.getReferralPatientHd(); 
					status=deleteObject("ReferralPatientDt","refrealDtId",  referralPatientDt.getRefrealDtId()); 
					List<Long>listReferalPatient=getReferralPatientHdId(referralPatientHd.getRefrealHdId());
					if(CollectionUtils.isEmpty(listReferalPatient) && referralPatientHd!=null) {
						status=deleteObject("ReferralPatientHd","refrealHdId",  referralPatientHd.getRefrealHdId());
					}
					//ReferralPatientHd referralPatientHd=getReferralPatientHdByRereralHdId(referalPatientHd);

					//session.delete(referralPatientHd);
					//status =deleteObject("ReferralPatientHd","refrealHdId",  referralPatientHd.getRefrealHdId());

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();

		}
		return status;
	}
	
	public ReferralPatientHd getReferralPatientHdByRereralHdId(Long referalPatientHd) {
		ReferralPatientHd referralPatientHd=null;
		try{
			Session session= getHibernateUtils.getHibernateUtlis().OpenSession();
			referralPatientHd=(ReferralPatientHd) session.createCriteria(ReferralPatientHd.class).add(Restrictions.eq("refrealHdId", referalPatientHd)).uniqueResult();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		 finally {
			 getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return referralPatientHd;
	}

	@Override
	public Long saveOrUpdatePatientPrescriptionHd(PatientPrescriptionHd patientPrescriptionHd) {
		 	Session session=null;
			Long patientPrecriptionHdId=null;
			Transaction tx=null;
			try{
				session= getHibernateUtils.getHibernateUtlis().OpenSession();
				tx=session.beginTransaction();
				session.saveOrUpdate(patientPrescriptionHd);
				patientPrecriptionHdId=patientPrescriptionHd.getPrescriptionHdId();
				session.flush();
		        session.clear();
				tx.commit();
				
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			finally {
				getHibernateUtils.getHibernateUtlis().CloseConnection();
				
				}
			return patientPrecriptionHdId;
	}
	@Override
	public DgOrderhd getDgOrderhdByDgOrderhdId(Long dgOrderhdId) {
		DgOrderhd dgOrderhd=null;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			
			dgOrderhd=(DgOrderhd) session.get(DgOrderhd.class, dgOrderhdId);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return dgOrderhd;
	}

 
public String deleteObject(String  className,String columnName,Long columnValue) {
 String status="";
		try {

			String hql = "delete from " + className + " WHERE " + columnName + "=" + columnValue;
			Query query = null;
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			query = session.createQuery(hql);
			query.executeUpdate();
			status = ""+columnValue;
			session.clear();
			session.flush();
		} catch(Exception e) {
	  status="error"+000;
		e.printStackTrace();
	}
		/*finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}*/
	 return  status;
}
public PatientPrescriptionHd getPatientPrecriptionHdByVisitId(Long visitId) {
	PatientPrescriptionHd patientPrescriptionHd=null;
	List<PatientPrescriptionHd>listPatientPrescriptionHd=null;
	try{
		Session session= getHibernateUtils.getHibernateUtlis().OpenSession();
		listPatientPrescriptionHd=  session.createCriteria(PatientPrescriptionHd.class).add(Restrictions.eq("visitId", visitId)).list();
		if(CollectionUtils.isNotEmpty(listPatientPrescriptionHd)) {
			patientPrescriptionHd=listPatientPrescriptionHd.get(0);
		}
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	 
	return patientPrescriptionHd;
}
public DgOrderhd getDgOrderHdByVisitId(Long visitId) {
	DgOrderhd dgOrderhd=null;
	List<DgOrderhd>listDgOrderhd=null;
	try{
		Session session= getHibernateUtils.getHibernateUtlis().OpenSession();
		listDgOrderhd=  session.createCriteria(DgOrderhd.class).add(Restrictions.eq("visitId", visitId)).list() ;
		if(CollectionUtils.isNotEmpty(listDgOrderhd)) {
			dgOrderhd=listDgOrderhd.get(0);
		}
		
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	 finally {
		 getHibernateUtils.getHibernateUtlis().CloseConnection(); 
	 }
	return dgOrderhd;
}

@Override
public List<Object[]> getProcedureDtList(Long opdPatientDetailId,Long visitId) {
	 List<Object[]>listProcedureDt=null;
	 try {
		 Session session=getHibernateUtils.getHibernateUtlis().OpenSession();
		 StringBuilder sbQuery = new StringBuilder();
		 
		 sbQuery.append(" SELECT NURSING_NAME , MAS_FREQUENCY.FREQUENCY ,PROCEDURE_DT.NO_OF_DAYS , PROCEDURE_DT.NURSING_REMARK,MAS_NURSING_CARE.NURSING_ID,");
		 sbQuery.append(" PROCEDURE_DT.PROCEDURE_ID,PROCEDURE_HD.PROCEDURE_HD_ID,MAS_FREQUENCY.FREQUENCY_ID");
		 sbQuery.append(" ,PROCEDURE_HD.PROCEDURE_TYPE FROM PROCEDURE_DT ");
		 sbQuery.append(" LEFT OUTER JOIN PROCEDURE_HD on PROCEDURE_DT.PROCEDURE_HD_ID=PROCEDURE_HD.PROCEDURE_HD_ID ");
		 sbQuery.append(" LEFT OUTER JOIN MAS_NURSING_CARE on PROCEDURE_DT.PROCEDURE_ID=MAS_NURSING_CARE.NURSING_ID ");
		 sbQuery.append(" LEFT OUTER JOIN MAS_FREQUENCY on MAS_FREQUENCY.FREQUENCY_ID=PROCEDURE_DT.FREQUENCY_ID ");
		 sbQuery.append("WHERE PROCEDURE_HD.VISIT_ID=:visitId  and PROCEDURE_HD.OPD_PATIENT_DETAILS_ID=:opdPatientDetailId ");
		  Query query = session.createSQLQuery(sbQuery.toString());

		    query.setParameter("visitId", visitId);
		    query.setParameter("opdPatientDetailId", opdPatientDetailId);
		    listProcedureDt = query.list();
	 }
	 catch(Exception e) {
		 e.printStackTrace();
	 }
	 finally {
		 getHibernateUtils.getHibernateUtlis().CloseConnection();
	 }
	 return listProcedureDt;
}

@Override
public Map<String,Object> getOpdObesityHd(Long visitId) {
	Session session=null;
	OpdObesityHd opdObesityHd=null;
	List<OpdObesityHd>listOpdObesityHd=null;
	List<OpdObesityDt>listOpdObesityDt=null;
	Map<String,Object>mapObject=new HashMap<>();
	try {
		  session= getHibernateUtils.getHibernateUtlis().OpenSession();
		  listOpdObesityHd=  session.createCriteria(OpdObesityHd.class).add(Restrictions.eq("visitId", visitId)).list() ;
		  if(CollectionUtils.isNotEmpty(listOpdObesityHd)) {
			  listOpdObesityDt=session.createCriteria(OpdObesityDt.class).add(Restrictions.eq("obesityHdId", listOpdObesityHd.get(0).getObesityHdId())).list() ;
			  mapObject.put("listOpdObesityDt", listOpdObesityDt);
		  }
		if(CollectionUtils.isNotEmpty(listOpdObesityHd)) {
			opdObesityHd=listOpdObesityHd.get(0);
			mapObject.put("opdObesityHd", opdObesityHd);
		}
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return mapObject;
}

/*@Override
public String deleteObesityMark(OpdObesityHd opdObesityHd) {
	Transaction trans=null;
	Session session=null;
	
	try {
		session=getHibernateUtils.getHibernateUtlis().OpenSession();
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	return "";
}*/

@Override
public String updateAndInsertDischargeICDCode(String [] icdCodeArray,Long visitId,Long patientId,Long opdPatientDetailId) {
	Session session=null;
	Transaction tx=null;
	String status="";
	try {
		session=getHibernateUtils.getHibernateUtlis().OpenSession();
		tx=session.beginTransaction();
		DischargeIcdCode dischargeIcdCode=null;
		for(String icg:icdCodeArray) {
			dischargeIcdCode=getDischargeIcdCodeByVisitAndPatientOrOpdPD(Long.parseLong(icg.trim()),visitId,patientId,opdPatientDetailId);
			if(dischargeIcdCode!=null) {
				dischargeIcdCode.setIcdId(Long.parseLong(icg.trim()));
			}
			else {
				dischargeIcdCode=new DischargeIcdCode();
				dischargeIcdCode.setIcdId(Long.parseLong(icg.trim()));
				dischargeIcdCode.setPatientId(patientId);
				dischargeIcdCode.setVisitId(visitId);
				dischargeIcdCode.setOpdPatientDetailsId(opdPatientDetailId);
			}
			session.saveOrUpdate(dischargeIcdCode);
		}
		status="success";
	}
	catch(Exception e) {
		e.printStackTrace();
		status="fail";
	}
	finally {
		if(session!=null) {
			session.flush();
		}
		if(tx!=null)
		{
			tx.commit();
		}
		
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return status;
}


public DischargeIcdCode getDischargeIcdCodeByVisitAndPatientOrOpdPD(Long icdId, Long visitId,Long patientId,Long opdPatientDetailId) {
	Session session=null;
	DischargeIcdCode dischargeIcdCode=null;
	try {
		session=getHibernateUtils.getHibernateUtlis().OpenSession();
		List<DischargeIcdCode> listDischargeIcdCode=session.createCriteria(DischargeIcdCode.class).add(Restrictions.eq("icdId", icdId))
				.add(Restrictions.eq("visitId", visitId)).add(Restrictions.eq("patientId", patientId)).add(Restrictions.eq("opdPatientDetailsId", opdPatientDetailId)).list();
		if(CollectionUtils.isNotEmpty(listDischargeIcdCode)) {
			dischargeIcdCode=listDischargeIcdCode.get(0);
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return dischargeIcdCode;
	
}
@SuppressWarnings("unchecked")
@Override
public List<MasIcd>getMasIcdByVisitPatAndOpdPD(Long visitId,Long patientId,Long opdPatientDetailId){
	List<MasIcd>listMasIcd=null;
	Session session=null;
	try {
		session=getHibernateUtils.getHibernateUtlis().OpenSession();
		
		List<Long> listIcd=session.createCriteria(DischargeIcdCode.class) 
				.add(Restrictions.eq("visitId", visitId)).add(Restrictions.eq("patientId", patientId)).add(Restrictions.eq("opdPatientDetailsId", opdPatientDetailId))
				.setProjection(Projections.property("icdId"))
				.list();
		
		 if(CollectionUtils.isNotEmpty(listIcd)) {
				Criteria cr = session.createCriteria(MasIcd.class).add(Restrictions.in("icdId", listIcd));

				ProjectionList projectionList = Projections.projectionList();
				projectionList.add(Projections.property("icdId").as("icdId"));
				projectionList.add(Projections.property("icdCode").as("icdCode"));
				projectionList.add(Projections.property("icdName").as("icdName"));
				cr.setProjection(projectionList);
				listMasIcd = cr.setResultTransformer(new AliasToBeanResultTransformer(MasIcd.class)).list();
				getHibernateUtils.getHibernateUtlis().CloseConnection();
		 }
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return listMasIcd;
}

@Override
public String deleteChangeIcdCode(Long icdId,Long visitId,Long opdPatientDetailId,Long patient) {
	String status="";
	try {
		DischargeIcdCode dischargeIcdCode =getDischargeIcdCodeByVisitAndPatientOrOpdPD(icdId, visitId,patient,opdPatientDetailId);
		 if(dischargeIcdCode!=null) {
		deleteObject("DischargeIcdCode","dischargeIcdCodeId",dischargeIcdCode.getDischargeIcdCodeId());	
		status="succsess";
		 }
		 }
	catch(Exception e) {
		status="fail";
		e.printStackTrace();
	}
	finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return status;
}



@Override
	public String deleteForReferalTypeNo(List<ReferralPatientDt> listReferralPatientDt,
			List<ReferralPatientHd> listReferralPatientHd) {
		Session session = null;
		Transaction tx = null;
		String status = "";
		try {
			session = getHibernateUtils.getHibernateUtlis().OpenSession();
			tx = session.beginTransaction();
			for (ReferralPatientDt referralPatientDt : listReferralPatientDt) {
				session.delete(referralPatientDt);
			}
			for (ReferralPatientHd referralPatientHd : listReferralPatientHd) {
				session.delete(referralPatientHd);
			}
			
			status = "success";
			 

		} catch (Exception e) {
			status = "fail";
			e.printStackTrace();
		} finally {
			if(session!=null) {
				session.flush();
			}
			if(tx!=null)
			{
				tx.commit();
			}
			getHibernateUtils.getHibernateUtlis().CloseConnection();

		}
		return status;

	}

@Override
public Map<String, Object> getPatientReferalHdByVisitIdAndOpdPdAndPatient(Long patientId,
		Long opdPatientDetailId) {
	 Map<String,Object>mapObject=new HashMap<>();
	 Session session=null;
	 ReferralPatientDt referralPatientDt=null; 
	 List<ReferralPatientHd>listReferralPatientHd=null;
	 List<ReferralPatientDt>listReferralPatientDt=null;
	 List<Long>listRefer =null;
	 try
	 {
		 session=getHibernateUtils.getHibernateUtlis().OpenSession();
		 listReferralPatientHd= session.createCriteria(ReferralPatientHd.class).add(Restrictions.eq("opdPatientDetailsId", opdPatientDetailId))
				 .add(Restrictions.eq("patientId", patientId)).list();
		 if(CollectionUtils.isNotEmpty(listReferralPatientHd)) {
			 listRefer=new ArrayList<Long>();
		 for(ReferralPatientHd referralPatientHd :listReferralPatientHd) {
			 listRefer.add(referralPatientHd.getRefrealHdId());
		 }
		 
		 listReferralPatientDt =session.createCriteria(ReferralPatientDt.class).add(Restrictions.in("refrealHdId", listRefer)).list();
		 }
		 
		 mapObject.put("listReferralPatientHd",listReferralPatientHd);
		 mapObject.put("listReferralPatientDt",listReferralPatientDt);
	 }
	 catch(Exception e) {
		 e.printStackTrace();
	 }
	 return mapObject;
}


 
public List<Long> getDgOrderDtByDgOrderHtId(Long dgOrderHtId) {
	List<Long>	listDhgOrderDt=null;
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		
		 Criteria cr=session.createCriteria(DgOrderdt.class).add(Restrictions.eq("orderhdId", dgOrderHtId));
			ProjectionList projectionList = Projections.projectionList();
			projectionList.add(Projections.property("orderdtId").as("orderdtId"));
			cr.setProjection(projectionList);
			listDhgOrderDt=cr.list();
				 
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	 
	return listDhgOrderDt;
}

public List<Long> getPatientPrescriptionHdId(Long patientPrescriptionHdId) {
	List<Long>	listPatientPrescriptionDt=null;
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		
		Criteria cr=session.createCriteria(PatientPrescriptionDt.class).add(Restrictions.eq("prescriptionHdId", patientPrescriptionHdId));
				ProjectionList projectionList = Projections.projectionList();
				projectionList.add(Projections.property("prescriptionDtId").as("prescriptionDtId"));
				cr.setProjection(projectionList);
				listPatientPrescriptionDt=cr.list();
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	 
	return listPatientPrescriptionDt;
}


public List<Long> getReferralPatientHdId(Long referralPatientHdId) {
	List<Long>	listReferralPatientDt=null;
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		
		Criteria cr=session.createCriteria(ReferralPatientDt.class).add(Restrictions.eq("refrealHdId", referralPatientHdId));
				ProjectionList projectionList = Projections.projectionList();
				projectionList.add(Projections.property("refrealDtId").as("refrealDtId"));
				cr.setProjection(projectionList);
				listReferralPatientDt=cr.list();
	}
	catch(Exception e) {
		e.printStackTrace();
	}
	 
	return listReferralPatientDt;
}


}







