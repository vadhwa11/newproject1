package com.icg.jkt.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.json.Json;
import javax.persistence.ParameterMode;
import javax.servlet.http.HttpServletRequest;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.procedure.ProcedureCall;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.icg.jkt.dao.MasterDao;
import com.icg.jkt.dao.OpdMasterDao;
import com.icg.jkt.entity.DgMasInvestigation;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasDisposal;
import com.icg.jkt.entity.MasEmpanelledHospital;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasFrequency;
import com.icg.jkt.entity.MasIcd;
import com.icg.jkt.entity.MasNursingCare;
import com.icg.jkt.entity.MasStoreItem;
import com.icg.jkt.entity.OpdTemplate;
import com.icg.jkt.entity.OpdTemplateInvestigation;
import com.icg.jkt.entity.OpdTemplateTreatment;
import com.icg.jkt.entity.TempHierarchy;
import com.icg.jkt.entity.Users;
import com.icg.jkt.entity.Visit;
import com.icg.jkt.hibernateutils.GetHibernateUtils;

import oracle.jdbc.oracore.OracleType;

@Repository
public class OpdMasterDaoImpl implements OpdMasterDao {

	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Autowired
	SessionFactory sessionFactory;

	@Override
	public List<MasDepartment> getDepartmentList() {

		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasDepartment.class);
		// r.add(Restrictions.eq("user_name", string));
		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("departmentCode").as("departmentCode"));
		projectionList.add(Projections.property("departmentName").as("departmentName"));
		// projectionList.add(Projections.property("DEPARTMENT_ID").as("DEPARTMENT_ID"));
		cr.setProjection(projectionList);
		List<MasDepartment> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasDepartment.class))
				.list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public MasEmployee checkEmp(Long i) {

		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasEmployee.class);
		cr.add(Restrictions.eq("employeeId", i));
		MasEmployee list = (MasEmployee) cr.uniqueResult();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public Users checkUser(Long i) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(Users.class);
		cr.add(Restrictions.eq("userId", i));
		Users list = (Users) cr.uniqueResult();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<MasIcd> getIcd() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasIcd.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("icdId").as("icdId"));
		projectionList.add(Projections.property("icdCode").as("icdCode"));
		projectionList.add(Projections.property("icdName").as("icdName"));
		projectionList.add(Projections.property("icdName").as("icdName"));

		cr.setProjection(projectionList);
		List<MasIcd> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasIcd.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<DgMasInvestigation> getInvestigationList(Long mainChargeCode) {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(DgMasInvestigation.class);
		cr.add(Restrictions.eq("mainChargecodeId", mainChargeCode));

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("investigationId").as("investigationId"));
		projectionList.add(Projections.property("investigationName").as("investigationName"));
		projectionList.add(Projections.property("investigationType").as("investigationType"));
		// projectionList.add(Projections.property("icdName").as("icdName"));

		cr.setProjection(projectionList);

		List<DgMasInvestigation> list = cr
				.setResultTransformer(new AliasToBeanResultTransformer(DgMasInvestigation.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;

	}

	@Override
	public List<MasStoreItem> getMasStoreItem() {
		/*
		 * List<MasStoreItem> list = null; try { Session session =
		 * getHibernateUtils.getHibernateUtlis().OpenSession(); Criteria cr =
		 * session.createCriteria(MasStoreItem.class); list = cr.list();
		 * System.out.println(list.size());
		 * getHibernateUtils.getHibernateUtlis().CloseConnection();
		 * 
		 * } catch (Exception e) { e.printStackTrace(); } return list;
		 */
		
		  Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		  Criteria cr = session.createCriteria(MasStoreItem.class,"masStoreItem");
		  cr=cr.createAlias("masStoreItem.masStoreUnit", "mh");
		  ProjectionList projectionList = Projections.projectionList();
		  projectionList.add(Projections.property("masStoreItem.itemId").as("itemId"));
		  projectionList.add(Projections.property("masStoreItem.pvmsNo").as("pvmsNo"));
		  projectionList.add(Projections.property("masStoreItem.nomenclature").as("nomenclature"));
		  //projectionList.add(Projections.property("masStoreItem.masStoreUnit.storeUnitName").as("storeUnitName"));
		  
		  cr.setProjection(projectionList); 
		  List<MasStoreItem> list = cr.setResultTransformer(new  AliasToBeanResultTransformer(MasStoreItem.class)).list();
		  getHibernateUtils.getHibernateUtlis().CloseConnection(); 
		  return list;
		 
	}

	@Override
	public List<MasFrequency> getMasFrequency() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasFrequency.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("frequencyId").as("frequencyId"));
		projectionList.add(Projections.property("frequencyCode").as("frequencyCode"));
		projectionList.add(Projections.property("frequencyName").as("frequencyName"));
		projectionList.add(Projections.property("feq").as("feq"));

		cr.setProjection(projectionList);
		List<MasFrequency> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasFrequency.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<OpdTemplate> getTemplateName(String templateType) {

		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(OpdTemplate.class);
		
		ProjectionList projectionList = Projections.projectionList();
		cr.add(Restrictions.eq("templateType", templateType));
		projectionList.add(Projections.property("templateId").as("templateId"));
		projectionList.add(Projections.property("templateName").as("templateName"));
		cr.setProjection(projectionList);
		List<OpdTemplate> list = cr.setResultTransformer(new AliasToBeanResultTransformer(OpdTemplate.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<MasEmpanelledHospital> getEmpanelledHospital() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasEmpanelledHospital.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("empanelledHospitalId").as("empanelledHospitalId"));
		projectionList.add(Projections.property("empanelledHospitalCode").as("empanelledHospitalCode"));
		projectionList.add(Projections.property("empanelledHospitalName").as("empanelledHospitalName"));

		cr.setProjection(projectionList);
		List<MasEmpanelledHospital> list = cr
				.setResultTransformer(new AliasToBeanResultTransformer(MasEmpanelledHospital.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public List<MasDisposal> getMasDisposal() {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasDisposal.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("disposalId").as("disposalId"));
		projectionList.add(Projections.property("disposalCode").as("disposalCode"));
		projectionList.add(Projections.property("disposalName").as("disposalName"));

		cr.setProjection(projectionList);
		List<MasDisposal> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasDisposal.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

	@Override
	public Map<String, Object> getMasNursingCare(HashMap<String, Object> jsonData) {
		List<MasNursingCare> list = null;
		String nursingType = (String) jsonData.get("nursingType");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria cr = session.createCriteria(MasNursingCare.class).add(Restrictions.eq("nursingType", nursingType));
			list = cr.list();
			map.put("list", list);
			getHibernateUtils.getHibernateUtlis().CloseConnection();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	@Override
	public Map<String, Object> getTemplateInvestigation(HashMap<String, Object> jsonData) {
		List<OpdTemplateInvestigation> list = null;
		long templateId = Long.parseLong((String) jsonData.get("templateId"));
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria cr = session.createCriteria(OpdTemplateInvestigation.class)
					.add(Restrictions.eq("templateId", templateId));
			list = cr.list();
			map.put("list", list);
			getHibernateUtils.getHibernateUtlis().CloseConnection();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
	
	@Override
	public Map<String, Object> getTemplateTreatment(HashMap<String, Object> jsonData) {
		List<OpdTemplateTreatment> list = null;
		long templateId = Long.parseLong((String) jsonData.get("templateId"));
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria cr = session.createCriteria(OpdTemplateTreatment.class)
					.add(Restrictions.eq("templateId", templateId));
			list = cr.list();
			map.put("list", list);
			getHibernateUtils.getHibernateUtlis().CloseConnection();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/*
	 * Call stored procedure: Kaushal Mishra
	 * 
	 * @Override public Map<String, Object> executeDbProcedure(long hospitalId) {
	 * Map<String, Object> mapObj = new HashMap<String, Object>(); boolean
	 * exeFlag=false; List unitlist = new ArrayList(); try{ Session session =
	 * getHibernateUtils.getHibernateUtlis().OpenSession();
	 * 
	 * Query query =session.createSQLQuery("CALL Asp_Hierarchy_Data (:param1)")
	 * .addEntity(TempHierarchy.class) .setLong("param1", hospitalId);
	 * 
	 * 
	 * unitlist =query.list(); exeFlag =true; mapObj.put("exeFlag", exeFlag);
	 * mapObj.put("unitlist", unitlist); }catch(Exception e) { e.printStackTrace();
	 * }finally { getHibernateUtils.getHibernateUtlis().CloseConnection(); } return
	 * mapObj; }
	 */

}