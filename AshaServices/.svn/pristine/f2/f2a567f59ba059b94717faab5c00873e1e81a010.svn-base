package com.icg.jkt.dao.impl;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;


import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.annotations.OrderBy;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.AliasToBeanResultTransformer;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.icg.jkt.dao.MasterDao;
import com.icg.jkt.entity.MasCommand;
import com.icg.jkt.entity.MasDepartment;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasIcd;
import com.icg.jkt.entity.MasState;
import com.icg.jkt.entity.MasTrade;
import com.icg.jkt.entity.MasUOM;
import com.icg.jkt.entity.MasUnit;
import com.icg.jkt.entity.MasUnitType;
import com.icg.jkt.hibernateutils.GetHibernateUtils;



@Repository
public class MasterDaoImpl implements MasterDao  {

	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Autowired
	SessionFactory sessionFactory;
	
	@Override
	public List<MasDepartment> getDepartmentList() {
		
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasDepartment.class);
	//r.add(Restrictions.eq("user_name", string));
		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("DEPARTMENT_CODE").as("DEPARTMENT_CODE"));
		projectionList.add(Projections.property("DEPARTMENT_NAME").as("DEPARTMENT_NAME"));
		projectionList.add(Projections.property("DEPARTMENT_ID").as("DEPARTMENT_ID"));
		cr.setProjection(projectionList);
		List<MasDepartment> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasDepartment.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}
	
@Override
public MasEmployee checkEmp(Long i) {
		
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria cr = session.createCriteria(MasEmployee.class);
	    cr.add(Restrictions.eq("employeeId", i));
	    MasEmployee list = (MasEmployee) cr.uniqueResult();
	    getHibernateUtils.getHibernateUtlis().CloseConnection();
		return list;
	}

@Override
public List<MasIcd> getIcd() {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria cr = session.createCriteria(MasIcd.class);

	ProjectionList projectionList = Projections.projectionList();
	projectionList.add(Projections.property("icdCode").as("icdCode"));
	projectionList.add(Projections.property("icdName").as("icdName"));
	cr.setProjection(projectionList);
	List<MasIcd> list = cr.setResultTransformer(new AliasToBeanResultTransformer(MasIcd.class)).list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return list;
}
/**
 * @author rajdeo.kumar
 */
@Override
public MasState checkMasState(String stateCode) {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria criteria = session.createCriteria(MasState.class);
	criteria.add(Restrictions.eq("stateCode", stateCode));
	MasState masStateObj = (MasState) criteria.uniqueResult();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return masStateObj;
}

@Override
public Map<String, List<MasState>>  getAllStates(JSONObject jsonObject) {
	Map<String, List<MasState>> map = new HashMap<String, List<MasState>>();
	List<MasState> stateList = new ArrayList<MasState>();
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	
	Criteria criteria =  session.createCriteria(MasState.class, "masstate");
	criteria.createAlias("masstate.country", "country")
	.add(Restrictions.eq("country.countryId",new Long(1)));
	
	
	ProjectionList projectionList = Projections.projectionList();
	projectionList.add(Projections.property("stateCode").as("stateCode"));
	projectionList.add(Projections.property("stateName").as("stateName"));
	projectionList.add(Projections.property("status").as("status"));
	criteria.setProjection(projectionList);
		//list = criteria.list();
	stateList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasState.class)).list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	
	map.put("stateList", stateList);
	return map;
}




@Override
public MasTrade checkTrade(String tradeName) {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria criteria =  session.createCriteria(MasTrade.class);
	//criteria.add(Restrictions.eq("status", "y"));
	MasTrade masTradeObj =  (MasTrade)criteria.setMaxResults(1).uniqueResult();	
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return masTradeObj;
}


@Override
public List<MasTrade> getTradeDetails(String tradeName) {
	Object[] statusObj = new Object[] {"t","n","y"};
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	List<MasTrade> masTradeList = new ArrayList<MasTrade>();
	Criteria criteria = session.createCriteria(MasTrade.class,"mastrade");
	criteria.add(Restrictions.in("mastrade.status", statusObj));
	//criteria.add(Restrictions.eq("tradeName", tradeName));
	
	ProjectionList projectionList = Projections.projectionList();
	projectionList.add(Projections.property("tradeId").as("tradeId"));
	projectionList.add(Projections.property("tradeName").as("tradeName"));
	projectionList.add(Projections.property("status").as("status"));
	
	criteria.setProjection(projectionList);
	
	masTradeList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasTrade.class)).list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return masTradeList;
}

@Override
public Map<String, Object> getTradeList() {
	// TODO Auto-generated method stub
	Map <String,Object> map = new HashMap<String,Object>();
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Object[] statusObj = new Object[] {"t","n","y"};
	List<MasTrade> masTradeList = new ArrayList<MasTrade>();
	Criteria criteria = session.createCriteria(MasTrade.class,"mastrade");
	
	criteria.add(Restrictions.in("mastrade.status", statusObj));
	
	ProjectionList projectionList = Projections.projectionList();
	projectionList.add(Projections.property("tradeId").as("tradeId"));
	projectionList.add(Projections.property("tradeName").as("tradeName"));
	projectionList.add(Projections.property("status").as("status"));
	
	criteria.setProjection(projectionList);
	masTradeList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasTrade.class)).list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	map.put("masTradeList", masTradeList);
	return map;
}

@Override
public List<MasCommand> validateMasCommand(String cmdCode, String cmdName) {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	List<MasCommand> cmdList = new ArrayList<MasCommand>();
	Criteria criteria = session.createCriteria(MasCommand.class);
	criteria.add(Restrictions.or(Restrictions.eq("cmdCode", cmdCode), Restrictions.eq("cmdName", cmdName)));
	cmdList = criteria.list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return cmdList;
}

@Override
public String addMasCommand(MasCommand masCommand) {
	String result="";
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();		
		Transaction tx = session.beginTransaction();
		Serializable savedObj =  session.save(masCommand);
		tx.commit();
		if(savedObj!=null) {
			result = "200";
		}else {
			result = "500";
		}
		
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return result;
}

@Override
public MasCommand chkCommand(String cmdName) {
	
	MasCommand masCmd = new MasCommand();	
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria criteria =  session.createCriteria(MasCommand.class);
	criteria.add(Restrictions.eq("cmdName", cmdName));
	masCmd = (MasCommand)criteria.uniqueResult();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	
	return masCmd;
}

@Override
public Map<String, List<MasCommand>>  getAllCommand(JSONObject jsonObj){
	Map<String, List<MasCommand>> mapObj = new HashMap<String, List<MasCommand>>();
	int pageSize = 5;
	int pageNo=1;
	
	List totalMatches = new ArrayList();
	 
	List<MasCommand> masCmdList = new ArrayList<MasCommand>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasCommand.class);		
		System.out.println("jsonObj dao  :: " +jsonObj);		
		if( jsonObj.get("PN")!=null)
		 pageNo = Integer.parseInt(jsonObj.get("PN").toString());
		System.out.println("pageNo  :: " +pageNo);		
		String cName="";
			 if (jsonObj.has("cmdName"))
			 {
				  cName = jsonObj.get("cmdName")+"%";
				  if(jsonObj.get("cmdName").toString().length()>0 && !jsonObj.get("cmdName").toString().trim().equalsIgnoreCase("")) {
						criteria.add(Restrictions.like("cmdName", cName));
					}
			 }	
			 
		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("cmdId").as("cmdId"));
		projectionList.add(Projections.property("cmdCode").as("cmdCode"));
		projectionList.add(Projections.property("cmdName").as("cmdName"));
		projectionList.add(Projections.property("status").as("status"));
		projectionList.add(Projections.property("cmdType").as("cmdType"));
		criteria.addOrder(Order.asc("cmdName"));
		
		totalMatches = criteria.list();
		System.out.println("totalMatches :: "+totalMatches.size());
				
		criteria.setFirstResult((pageSize) * (pageNo - 1));
		criteria.setProjection(projectionList).setMaxResults(pageSize);
		masCmdList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasCommand.class)).list();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		mapObj.put("masCmdList", masCmdList);
		mapObj.put("totalMatches", totalMatches);
		return mapObj;
	}
	
	
	


@Override
public List<MasCommand> getCommand(String cmdName){
	Object[] status = new Object[] {"y"};
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	List<MasCommand> masCmdList = new ArrayList<MasCommand>();
	Criteria criteria = session.createCriteria(MasCommand.class);
	if(cmdName.length()>0 && !cmdName.trim().equalsIgnoreCase("")) {
		
		criteria.add(Restrictions.like("cmdName", cmdName));
	}
	ProjectionList projectionList = Projections.projectionList();
	projectionList.add(Projections.property("cmdId").as("cmdId"));
	projectionList.add(Projections.property("cmdCode").as("cmdCode"));
	projectionList.add(Projections.property("cmdName").as("cmdName"));
	projectionList.add(Projections.property("status").as("status"));
	
	criteria.setProjection(projectionList);
	
	masCmdList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasCommand.class)).list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return masCmdList;
}

@Override
public List<MasTrade> validateMasTrade(String tradeName) {
	List<MasTrade> masTrade = new ArrayList<MasTrade>();
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria criteria =  session.createCriteria(MasTrade.class);
	criteria.add(Restrictions.eq("tradeName", tradeName));
	masTrade = criteria.list();
	getHibernateUtils.getHibernateUtlis().CloseConnection();
	return masTrade;
}

@Override
public String addTradeDetails(MasTrade masTrade) {
	String result="";
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Transaction tx = session.beginTransaction();
				Serializable savedObj =  session.save(masTrade);
				tx.commit();
				if(savedObj!=null) {
					result = "200";
				}else {
					result = "500";
				}
				
	}catch(Exception e) {
		e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
	
	return result;
}

@Override
public String updateCommand(Long commandId, String cmdCode, String cmdName, String cmdType) {	
	String result="";
	try {
	List<MasCommand> masCmdList = new ArrayList<MasCommand>();
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasCommand.class);
		criteria.add(Restrictions.eq("cmdId", commandId));
		masCmdList = criteria.list();
		
		for(int i=0;i<masCmdList.size();i++) {
			Long cmdId = masCmdList.get(i).getCmdId();
			
			Object cmdObject =  session.load(MasCommand.class, cmdId);
			MasCommand masCommand = (MasCommand)cmdObject;
			
			Transaction transaction = session.beginTransaction();
			masCommand.setCmdCode(cmdCode);
			masCommand.setCmdName(cmdName);
			if(cmdType.equalsIgnoreCase("Delhi HQ")) {
				
				masCommand.setCmdType(cmdType);
			}
			if(cmdType.equalsIgnoreCase("Noida HQ")) {
				masCommand.setCmdType(cmdType);
			}
			masCommand.setStatus("y");
			masCommand.setLastChgBy(new Long(1));
			
			long d = System.currentTimeMillis();
			Date date = new Date(d);
			
			masCommand.setLastChgDate(date);
			String lastChgTime = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
			//masCommand.setLastChgTime(lastChgTime);
			
			session.update(masCommand);
			
			transaction.commit();
			
			result="200";	
			}
		
		
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
	
	
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	
	
	return result;
}

@Override
public String updateCommandStatus(Long commandId,String cmdCode,String status) {
	//Object[] status = new Object[] {"y"};
	String result = "";
	try {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	List<MasCommand> masCmdStatusList = new ArrayList<MasCommand>();
	Criteria criteria = session.createCriteria(MasCommand.class,"mascommand");
	criteria.add(Restrictions.and(Restrictions.eq("cmdId", commandId),Restrictions.eq("cmdCode", cmdCode),Restrictions.eq("mascommand.status", status)));
	//criteria.add(Restrictions.in("mascommand.status", status));
	masCmdStatusList = criteria.list();
		for(int i=0;i<masCmdStatusList.size();i++) {
			Long cmdId = masCmdStatusList.get(i).getCmdId();
			
			Object cmdObject =  session.load(MasCommand.class, cmdId);
			MasCommand masCommand = (MasCommand)cmdObject;
			
			Transaction transaction = session.beginTransaction();
			if(masCommand.getStatus().equalsIgnoreCase("y")){
				masCommand.setStatus("n");
				//result="400";
			}else if(masCommand.getStatus().equalsIgnoreCase("n")) {
				masCommand.setStatus("y");
				//result="200";
			}else {
				masCommand.setStatus("y");
			}
			
			session.update(masCommand);
			transaction.commit();
			result="200";
		}
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return result;
}
	/***************************************MAS UOM*************************************************************/
@Override
public List<MasUOM> validateMasUOM(String UOMCode, String UOMName) {
	List<MasUOM> masUnitList = new ArrayList<MasUOM>();
	try {
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasUOM.class);
		criteria.add(Restrictions.or(Restrictions.eq("UOMCode", UOMCode),Restrictions.eq("UOMName", UOMName)));
		masUnitList = criteria.list();
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return masUnitList;
}

	@Override
	public String addMasUOM(MasUOM masUOM) {
		String result="";		
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Transaction tx = session.beginTransaction();
			Serializable savedObj =  session.save(masUOM);
			tx.commit();
			if(savedObj!=null) {
				result="200";
			}else {
				result = "500";
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		
		return result;
	}

	@Override
	public Map<String,List<MasUOM>> getAllUOM(JSONObject jsonObject) {
		int pageSize = 5;
		int pageNo=1;
		List totalMatches = new ArrayList();
		List<MasUOM> unitList = new ArrayList<MasUOM>();
		Map<String,List<MasUOM>> mapObj = new HashMap<String,List<MasUOM>>();
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(MasUOM.class);
			if( jsonObject.get("PN")!=null)
				 pageNo = Integer.parseInt(jsonObject.get("PN").toString());
				System.out.println("pageNo  getAllUOM :: " +pageNo);
			String uName="";
						
			 if (jsonObject.has("UOMName"))
			 {
				 uName = jsonObject.get("UOMName")+"%";
				  if(jsonObject.get("UOMName").toString().length()>0 && !jsonObject.get("UOMName").toString().trim().equalsIgnoreCase("")) {
						criteria.add(Restrictions.like("UOMName", uName));
					}
			 }
			
			ProjectionList projectionList = Projections.projectionList();
			projectionList.add(Projections.property("UOMId").as("UOMId"));
			projectionList.add(Projections.property("UOMCode").as("UOMCode"));
			projectionList.add(Projections.property("UOMName").as("UOMName"));
			projectionList.add(Projections.property("UOMStatus").as("UOMStatus"));
			projectionList.add(Projections.property("UOMStatus").as("UOMStatus"));
			
			totalMatches = criteria.list();
			System.out.println("totalMatches :: "+totalMatches.size());
					
			criteria.setFirstResult((pageSize) * (pageNo - 1));
			
			criteria.setProjection(projectionList).setMaxResults(pageSize);
			unitList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasUOM.class)).list();
			
			mapObj.put("totalMatches", totalMatches);
			mapObj.put("unitList", unitList);
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return mapObj;
	}

	@Override
	public String updateUOMDetails(Long UOMId, String UOMCode, String UOMName) {
		String result = "";
		try {
		List<MasUOM> masUOMList = new ArrayList<MasUOM>();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(MasUOM.class);
			criteria.add(Restrictions.eq("UOMId", UOMId));
			masUOMList = criteria.list();
			
			for(int i=0;i<masUOMList.size();i++) {
				
				Long Id = masUOMList.get(i).getUOMId();
				
				Object uomObject =  session.load(MasUOM.class, Id);
				MasUOM masUnit = (MasUOM)uomObject;
				
				Transaction transaction = session.beginTransaction();
				masUnit.setUOMCode(UOMCode.toUpperCase());
				masUnit.setUOMName(UOMName.toUpperCase());
				
				Long lastChgBy = new Long(1);
				String uomStatus = "y";
				masUnit.setLastChgBy(lastChgBy);
				masUnit.setUOMStatus(uomStatus.toUpperCase());
				
				
				long d = System.currentTimeMillis();
				Date date = new Date(d);
				String lastChgTime = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
				
				masUnit.setLastChgDate(date);
				
				//masUnit.setLastChgTime(lastChgTime);
				
				session.update(masUnit);
				
				transaction.commit();
				
				result="200";	
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return result;
	}

	@Override
	public MasUOM chkMasUnit(String UOMCode) {
		MasUOM masUnit = new MasUOM();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasUOM.class);
		criteria.add(Restrictions.eq("UOMCode", UOMCode));
		masUnit = (MasUOM)criteria.uniqueResult();
		getHibernateUtils.getHibernateUtlis().CloseConnection();
		return masUnit;
	}

	@Override
	public String updateUOMStatus(Long UOMId, String UOMCode, String UOMStatus) {
		String result = "";
		try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		List<MasUOM> masUnitStatusList = new ArrayList<MasUOM>();
		Criteria criteria = session.createCriteria(MasUOM.class,"masunit");
		criteria.add(Restrictions.and(Restrictions.eq("UOMId", UOMId),Restrictions.eq("UOMCode", UOMCode),Restrictions.eq("masunit.UOMStatus", UOMStatus)));
		masUnitStatusList = criteria.list();
			for(int i=0;i<masUnitStatusList.size();i++) {
				Long uomId = masUnitStatusList.get(i).getUOMId();
				
				Object uomObject =  session.load(MasUOM.class, uomId);
				MasUOM masUnit = (MasUOM)uomObject;
				
				Transaction transaction = session.beginTransaction();
				if(masUnit.getUOMStatus().equalsIgnoreCase("y")){
					masUnit.setUOMStatus("n".toUpperCase());
					
				}else if(masUnit.getUOMStatus().equalsIgnoreCase("n")) {
					masUnit.setUOMStatus("y".toUpperCase());
					
				}else {
					masUnit.setUOMStatus("y".toUpperCase());
				}
				
				session.update(masUnit);
				transaction.commit();
				result="200";
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return result;
	}
/*****************************MAS UNIT********************************************/
	@Override
	public Map<String, List<MasUnit>> getAllUnit(JSONObject jsondata) {
		Map<String, List<MasUnit>> map = new HashMap<String, List<MasUnit>>();
		List<MasUnit> masUnitList = new ArrayList<MasUnit>();
		int pageNo=1;
		int pageSize = 5;
		try {
			Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(MasUnit.class);
			
			System.out.println("jsondata dao getAllUnit :: " +jsondata);		
			if( jsondata.get("PN")!=null)
			 pageNo = Integer.parseInt(jsondata.get("PN").toString());
			System.out.println("pageNo getAllUnit :: " +pageNo);		
			String uName="";
				 if (jsondata.has("unitName"))
				 {
					  uName = jsondata.get("unitName")+"%";
					  if(jsondata.get("unitName").toString().length()>0 && !jsondata.get("unitName").toString().trim().equalsIgnoreCase("")) {
							criteria.add(Restrictions.like("unitName", uName));
							criteria.addOrder(Order.asc(jsondata.get("unitName").toString()));
						}
				 }
				 List totalMatches = criteria.list();
				 System.out.println("totalMatches unit :: "+totalMatches.size());
				 criteria.setFirstResult((pageSize) * (pageNo - 1));
				 criteria.setMaxResults(pageSize);
			masUnitList = criteria.list();
			
			//masUnitList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasUnit.class)).list();
		map.put("masUnitList", masUnitList);
		map.put("totalMatches", totalMatches);
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
		return map;
	}

@Override
public List<MasCommand> getCommandList() {
	List<MasCommand> cList = new ArrayList<MasCommand>();
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasCommand.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("cmdId").as("cmdId"));		
		projectionList.add(Projections.property("cmdName").as("cmdName"));
		criteria.setProjection(projectionList);
		
		cList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasCommand.class)).list();
		
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return cList;
}


@Override
public List<MasUnit> validateUnit(String unitName) {
	List<MasUnit> masUnitList =  new ArrayList<MasUnit>();
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
			Criteria criteria = session.createCriteria(MasUnit.class);
			criteria.add(Restrictions.eq("unitName", unitName));
			masUnitList = criteria.list();
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			getHibernateUtils.getHibernateUtlis().CloseConnection();
		}
	return masUnitList;
}

@Override
public String addMasUnit(MasUnit masUnit) {
	String result="";		
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Transaction tx = session.beginTransaction();
		Serializable savedObj =  session.save(masUnit);
		tx.commit();
		if(savedObj!=null) {
			result="200";
		}else {
			result = "500";
		}
		
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	
	return result;

}

@Override
public List<MasUnitType> getUnitType() {
	List<MasUnitType> unitTypeList = new ArrayList<MasUnitType>();
	
	try {
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		Criteria criteria = session.createCriteria(MasUnitType.class);

		ProjectionList projectionList = Projections.projectionList();
		projectionList.add(Projections.property("unitTypId").as("unitTypId"));		
		projectionList.add(Projections.property("unitTypName").as("unitTypName"));
		criteria.setProjection(projectionList);
		
		unitTypeList = criteria.setResultTransformer(new AliasToBeanResultTransformer(MasUnitType.class)).list();
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return unitTypeList;
}

@Override
public String updateUnit(Long uId, String uName, Long commandId, Long uTypId) {	
	String result="";
	try {
	List<MasUnit> masUnitList = new ArrayList<MasUnit>();
	Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
	Criteria criteria = session.createCriteria(MasUnit.class);
	criteria.add(Restrictions.eq("unitId", uId));
	masUnitList = criteria.list();
	System.out.println("masUnitList :: "+masUnitList.size());
	
	if(masUnitList!=null && masUnitList.size()>0) {
		for(int i=0;i<masUnitList.size();i++) {
			Long Id = masUnitList.get(i).getUnitId();
			System.out.println("Id :: "+Id);
			Object unitObject =  session.load(MasUnit.class, Id);
			MasUnit masUnit = (MasUnit)unitObject;
			
			long d = System.currentTimeMillis();
			Date date = new Date(d);
			
			Transaction tx = session.beginTransaction();
			masUnit.setUnitName(uName);
			
			MasCommand command = new MasCommand();
			command.setCmdId(commandId);
			masUnit.setCommand(command);
			
			MasUnitType masUnitType = new MasUnitType();
			masUnitType.setUnitTypId(uTypId);
			masUnit.setUnitType(masUnitType);
			
			masUnit.setLastChgBy(new Long(1));
			masUnit.setLastChgDate(date);
			session.update(masUnit);			
			tx.commit();
			result += "200";
		}
	}else {
		result += "500";
	}
	
	}catch(Exception e) {
		e.printStackTrace();
	}finally {
		getHibernateUtils.getHibernateUtlis().CloseConnection();
	}
	return result;
}


}