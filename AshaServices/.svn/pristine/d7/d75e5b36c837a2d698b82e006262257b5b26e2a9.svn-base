package com.icg.jkt.service.impl;

import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import com.icg.jkt.utils.RequestConstants;
import com.icg.jkt.utils.ValidateUtils;
import com.icg.jkt.dao.OpdDao;
import com.icg.jkt.entity.AdmissionDischarge;
import com.icg.jkt.entity.MasDisposal;
import com.icg.jkt.entity.MasAdministrativeSex;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasEmployeeDepartment;
import com.icg.jkt.entity.MasGender;
import com.icg.jkt.entity.MasRelation;
import com.icg.jkt.entity.MasSession;
import com.icg.jkt.entity.OpdObesityDt;
import com.icg.jkt.entity.OpdObesityHd;
import com.icg.jkt.entity.OpdPatientDetail;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.entity.ReferralPatientDt;
import com.icg.jkt.entity.ReferralPatientHd;
import com.icg.jkt.entity.Registration;
import com.icg.jkt.entity.Visit;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.service.OpdService;
import com.icg.jkt.utils.CommonUtil;
import com.icg.jkt.utils.DateTimeUtil;
import com.icg.jkt.utils.HMSUtil;
import com.icg.jkt.utils.ICGUtils;
import com.icg.jkt.utils.ProjectUtils;
import lombok.*;


@Repository
public class OpdServiceImpl implements OpdService {

	@Autowired
	GetHibernateUtils getHibernateUtils;

	@Autowired
	SessionFactory sessionFactory;

	@Autowired
	OpdDao od;

	@Override
	@SuppressWarnings({ "unused", "unchecked" })
	public Map<String, Object> getWaitingPatientList(Map mapForDS) {
		// Session session = (Session) getSession();
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();
		List<Visit> patientList = new ArrayList<Visit>();
		List<MasEmployee> doctorList = new ArrayList<MasEmployee>();
		List<MasSession> sessionList = new ArrayList<MasSession>();
		Map<String, Object> map = new HashMap<String, Object>();
		String deptName = "";
		Map<String, Object> utilMap = new HashMap<String, Object>();
		utilMap = (Map) DateTimeUtil.getCurrentDateAndTime();
		String currentDate = (String) utilMap.get("currentDate");
		Date date = new Date();
		String category = "Doctor";

		String reportingDept[] = { "OPD", "FollowUp" };

		int deptId = 0;
		int sessionId = 0;
		int hospitalId = 0;
		String serviceNo = "";
		String flag = "";
		int tokenNo = 0;
		String patientName = "";
		String visitDate = null;

		if (mapForDS.get(RequestConstants.SESSION_ID) != null) {
			sessionId = (Integer) mapForDS.get(RequestConstants.SESSION_ID);

		}

		if (mapForDS.get("flag") != null) {
			flag = (String) mapForDS.get("flag");
		}

		if (mapForDS.get("deptId") != null) {
			deptId = (Integer) mapForDS.get("deptId");
		}

		if (mapForDS.get("hospitalId") != null) {
			hospitalId = (Integer) mapForDS.get("hospitalId");
		}
		if (mapForDS.get("visitDate") != null) {
			visitDate = (String) mapForDS.get("visitDate");
		}

		String currentTime = DateTimeUtil.getCurrentTimeWithoutSecond().get("currentTime") != null
				? DateTimeUtil.getCurrentTimeWithoutSecond().get("currentTime").toString() : "";
		try {

			if (mapForDS.get("serviceNo") != null) {
				serviceNo = (String) mapForDS.get("serviceNo");
			}

			if (mapForDS.get(RequestConstants.PATIENT_NAME) != null) {
				patientName = (String) mapForDS.get(RequestConstants.PATIENT_NAME);
			}

			if (mapForDS.get("empId") != null && (Integer) mapForDS.get("empId") > 0) {
				int empId = (Integer) mapForDS.get("empId");

				Criteria crit = session.createCriteria(Visit.class)

						.add(Restrictions.eq("Doctor.Id", empId)).add(Restrictions.eq("Department.Id", deptId))
						.createAlias("Hospital", "h").add(Restrictions.eq("h.Id", hospitalId))
						.createAlias("Session", "ses").add(Restrictions.in("ReportingFor", reportingDept));
				if (visitDate != null)
					date = DateTimeUtil.convertStringTypeDateToDateType(visitDate);

				if (flag.equalsIgnoreCase("rc")) {
					crit.add(Restrictions.or(
							Restrictions.and(Restrictions.eq("VisitStatus", "c"), Restrictions.eq("VisitDate", date)),
							Restrictions.and(Restrictions.eq("TokenNo", 0), Restrictions.eq("AddEditDate", date))));

				} else {
					crit.add(Restrictions.or(Restrictions.eq("VisitStatus", "w").ignoreCase(),
							Restrictions.eq("VisitStatus", "r").ignoreCase()))
							.add(Restrictions.eq("VisitDate", new Date()));

				}

				if (!serviceNo.equals("")) {
					crit = crit.createAlias("Hin", "hin").add(Restrictions.eq("hin.ServiceNo", serviceNo));
				}
				if (!patientName.equals("")) {
					crit = crit.createAlias("Hin", "hin").add(Restrictions.like("hin.PFirstName", patientName + "%"));
				}

				if (sessionId != 0) {
					crit.add(Restrictions.eq("Session.Id", sessionId));
				}
				patientList = crit.addOrder(Order.desc("VisitDate")).addOrder(Order.asc("VisitTime")).list();
				map.put("empId", empId);
				if (patientList.size() > 0) {
					String dentalDepartmentCode = null;
					try {
						dentalDepartmentCode = ICGUtils.getValuesFromPropertiesFile("adt.properties",
								"departmentCodeForDental");
					} catch (Exception e) {
						e.printStackTrace();
					}

					map.put("dentalCode", dentalDepartmentCode);

				}

			}

			sessionList = session.createCriteria(MasSession.class).add(Restrictions.eq("Status", "y")).list();
			String empCategoryCodeForDoctor = "";

			try {

				empCategoryCodeForDoctor = ICGUtils.getValuesFromPropertiesFile("adt.properties",
						"empCategoryCodeForDoctor");

			} catch (Exception e) {
				e.printStackTrace();
			}
			doctorList = session.createCriteria(MasEmployeeDepartment.class).createAlias("Employee", "emp")
					.createAlias("emp.EmpCategory", "ec").add(Restrictions.eq("Status", "y").ignoreCase())
					.add(Restrictions.eq("Department.Id", deptId))
					.add(Restrictions.eq("ec.EmpCategoryCode", empCategoryCodeForDoctor))
					.addOrder(Order.asc("emp.FirstName")).list();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
		map.put("patientList", patientList);
		map.put("deptName", deptName);
		map.put("doctorList", doctorList);
		map.put("sessionList", sessionList);

		return map;
	}

	
	
	
	@Override
	public String PreConsPatientWatingList(HashMap<String, Object> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		// TODO Auto-generated method stub
		JSONObject json = new JSONObject();
		try {
			if (jsondata.get("employeeId") == null || jsondata.get("employeeId").toString().trim().equals("")) {
				return "{\"status\":\"0\",\"msg\":\"json is not contain EMPLOYEE_ID as a  key or value or it is null\"}";
			} else {
				
				MasEmployee checkEmp = od.checkEmp(Long.parseLong(jsondata.get("employeeId").toString()));
				
				if (checkEmp != null) {
					
					List<Visit> getvisit = od.getVisit();
					List<Patient> getPatinet = od.getPatinet();
					

					if (getvisit.size() == 0) {
						return "{\"status\":\"0\",\"msg\":\"Data not found\"}";
					}

					else {

						List<HashMap<String, Object>> c = new ArrayList<HashMap<String, Object>>();
						
						for (Visit v : getvisit) {
							
							Patient p = od.checkPatient(v.getPatient().getPatientId());
						
							for(Patient p1 : getPatinet)
							{
                          	 MasAdministrativeSex ms=od.checkGender(p1.getMasAdministrativeSex().getAdministrativeSexId());
                          	 MasRelation mr=od.checkRelation(p1.getMasRelation().getRelationId());
							 
							if (p!= null ) {
								HashMap<String, Object> pt = new HashMap<String, Object>();
								pt.put("visitStatus", v.getVisitStatus());
								pt.put("tokenNo", v.getTokenNo());
								pt.put("employeeName", p.getEmployeeName());
								pt.put("serviceNo", p.getServiceNo());
								pt.put("patientName", p.getPatientName());
								pt.put("dateOfBirth", p.getDateOfBirth());
								pt.put("administrativeSexName", ms.getAdministrativeSexName());
								pt.put("relationName", mr.getRelationName());
								c.add(pt);
							}
							}

						}

						json.put("Visit List", c);
						// json.put("Visit List", getvisit);
						json.put("msg", "Visit List  get  sucessfull... ");
						json.put("status", "1");

					}

				} else {
					return "{\"status\":\"0\",\"msg\":\"json is not contain EMPLOYEE_ID Not Found\"}";

				}

				return json.toString();
			}
		} finally {
			System.out.println("Exception Occured");
		}
	}

	@Override
	public String addVitalPreConsulataionDetails(HashMap<String, Object> payload, HttpServletRequest request,
			HttpServletResponse response) {

		// TODO Auto-generated method stub
		JSONObject json = new JSONObject();
		OpdPatientDetail opddetails = new OpdPatientDetail();
		try {
			if (!payload.isEmpty()) {

				JSONObject nullbalankvalidation = null;
				nullbalankvalidation = ValidateUtils.addVitalPreConsulataionDetailsvalidation(payload);
				if (nullbalankvalidation.optString("status").equals("0")) {
					return nullbalankvalidation.toString();
				} else {

					opddetails.setUhidNo(Long.parseLong(payload.get("uhidNo").toString()));
					opddetails.setPatientId(Long.parseLong(payload.get("patientId").toString()));
					opddetails.setHeight(payload.get("height").toString());
					opddetails.setWeight(payload.get("weight").toString());
					opddetails.setIdealWeight(payload.get("idealWeight").toString());
					opddetails.setVarationInWeight(Long.parseLong(payload.get("varationInWeight").toString()));
					opddetails.setTemperature(payload.get("temperature").toString());
					opddetails.setBp(payload.get("bp").toString());
					opddetails.setPulse(payload.get("pulse").toString());
					opddetails.setSpo2(payload.get("spo2").toString());
					opddetails.setBmi(payload.get("bmi").toString());
					opddetails.setRr(payload.get("rr").toString());

					String resp = od.opdVitalDetails(opddetails);

					if (resp != null && resp.equalsIgnoreCase("200")) {
						json.put("msg", " Vitals Details Insert successfully ");
						json.put("status", "1");
					} else if (resp != null && resp.equalsIgnoreCase("403")) {
						json.put("msg", " you are not authorized for this activity ");
						json.put("status", "0");
					} else {
						json.put("msg", resp);
						json.put("status", "0");
					}
				}
			} else {
				json.put("status", "0");
				json.put("msg", "json not contain any object");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json.toString();
	}
	
	@Override
	public String getObesityWaitingList(HashMap<String, Object> jsondata){
		Map<String, Object> map = new HashMap<>();
		map = od.getObesityWaitingList(jsondata);		
		JSONObject json = new JSONObject();
		if(map.isEmpty()) {
			json.put("status", "0");
			json.put("msg", "No Record found");
		}else {
			json.put("status", "1");
			json.put("msg", "Obesity Waiting List got successfull");
			json.put("count", map.get("count"));			
			List<HashMap<String,Object>> patientObesityList = new ArrayList<>();
			List<OpdObesityHd> patientList = (List<OpdObesityHd>)map.get("patientList");
			
			
			for(int i=0;i<patientList.size();i++) {
				HashMap<String, Object> jsonData = new HashMap<>();
				
				long Id= patientList.get(i).getObesityHdId() !=0?patientList.get(i).getObesityHdId():0;
				jsonData.put("Id",Id);
				String serviceNo="";
				if(patientList.get(i).getPatient() != null) {
					serviceNo = patientList.get(i).getPatient().getServiceNo();
				}
				jsonData.put("serviceNo",serviceNo);
				
				String patientName = "";
				if(patientList.get(i).getPatient() != null) {
					patientName = patientList.get(i).getPatient().getPatientName();
				}
				jsonData.put("patientName",patientName);
				
				String age = "";
				if(patientList.get(i).getPatient() != null) {
					Date date = patientList.get(i).getPatient().getDateOfBirth();
					Period p = ProjectUtils.getDOB(date);
					jsonData.put("age", p.getYears());
				}else {
					jsonData.put("age", age);
				}
				String gender = "";				
				if(patientList.get(i).getPatient().getMasAdministrativeSex() != null) {
					gender = patientList.get(i).getPatient().getMasAdministrativeSex().getAdministrativeSexName();
				}
				jsonData.put("gender", gender);
				
				String DeptName = "";
				if(patientList.get(i).getVisit().getMasDepartment() != null) {
					DeptName = patientList.get(i).getVisit().getMasDepartment().getDepartmentName();
				}
				jsonData.put("DeptName", DeptName);
				
				jsonData.put("variation",patientList.get(i).getVariation());
				
				patientObesityList.add(jsonData);
			}
			json.put("patientObesityList", patientObesityList);
		}
		return json.toString();
	}
	
	@Override
	public String getObesityDetails(HashMap<String, Object> jsondata){
		Map<String, Object> map = new HashMap<>();
		map = od.getObesityDetails(jsondata);		
		JSONObject json = new JSONObject();
		List<OpdObesityHd> obesityList1 = (List<OpdObesityHd>) map.get("obesityList");
		List<OpdObesityDt> obesityDetailList1 = (List<OpdObesityDt>) map.get("obesityDetailList");
		List<Map<String,Object>> obesityList = new ArrayList<>();
		List<Map<String,Object>> obsesityDetailList = new ArrayList<>();
		
		for(OpdObesityHd list1 : obesityList1) {
			Map<String,Object> map1 = new HashMap<>();
			map1.put("serviceNo", list1.getPatient().getServiceNo());
			map1.put("patientName", list1.getPatient().getPatientName());
			
			Date date = (Date) list1.getPatient().getDateOfBirth();
			Period period = ProjectUtils.getDOB(date);
			map1.put("age", period.getYears());
			map1.put("gender", list1.getPatient().getMasAdministrativeSex().getAdministrativeSexName());
			map1.put("header_id", list1.getObesityHdId());
			obesityList.add(map1);
		}
		for(OpdObesityDt list2 : obesityDetailList1) {
			Map<String,Object> map2 = new HashMap<>();
			map2.put("headerId", list2.getOpdObesityHd().getObesityHdId());
			map2.put("date", list2.getObesityDate());
			map2.put("month", list2.getMonth());
			map2.put("height", list2.getHeight());
			map2.put("weight", list2.getWeight());
			map2.put("idealWeight", list2.getIdealWeight());
			map2.put("variation", list2.getVariation());
			map2.put("bmi", list2.getBmi());
			obsesityDetailList.add(map2);
		}
		
		json.put("obesityList", obesityList);
		json.put("obsesityDetailList", obsesityDetailList);
		return json.toString();
	}
	
	@Override
	public String idealWeight(HashMap<String, String> jsondata, HttpServletRequest request,
			HttpServletResponse response) {
		JSONObject json = new JSONObject();
		List<HashMap<String, Object>> c = new ArrayList<HashMap<String, Object>>();
		if (!jsondata.isEmpty()) {

			JSONObject nullbalankvalidation = null;
			nullbalankvalidation = ValidateUtils.checkIdealWeight(jsondata);
			if (nullbalankvalidation.optString("status").equals("0")) {
				return nullbalankvalidation.toString();
			} else {
				List<String> idealWeight = od.getIdealWeight(Long.parseLong(jsondata.get("height").toString()),
						jsondata.get("age"));
				if (idealWeight != null && !CollectionUtils.isEmpty(idealWeight)) {
					try {
						HashMap<String, Object> iw = new HashMap<String, Object>();
						iw.put("idealWeight", idealWeight.get(0));
						c.add(iw);
						json.put("data", c);
						json.put("msg", "data get sucessfully......");
						json.put("status", 1);
					} catch (JSONException e) {
						e.printStackTrace();
					}
				} else {
					try {
						json.put("msg", "data not found");
						json.put("status", 0);
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}
			}
		}
		return json.toString();
	}
	
	public String saveObesityDetails(HashMap<String, Object> jsondata){
		Map<String,Object> map = new HashMap<String,Object>();
		JSONObject  obj = new JSONObject();
		String msg = od.saveObesityDetails(jsondata);
		obj.put("msg", msg);
		return obj.toString();
	}
	@Override
	public String referredPatientList(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		Map<String,Object> map = od.referredPatientList(jsondata);
		JSONObject obj = new JSONObject();
		List<Map<String,Object>> headerList = new ArrayList<>();
		if(!map.isEmpty()) {
			List<ReferralPatientHd> patientList = (List<ReferralPatientHd>)map.get("referredPatientList");
			if(patientList.size()>0) {
				for(ReferralPatientHd list : patientList) {
					Map<String,Object> jsonData = new HashMap<>();
					String service_no = "", patient_name="", gender = "", rank="", mobileNo="",referredHospital="",id="",count="",referredDate="";
					Date date=null;
					if(list.getPatient() != null) {
						service_no = (String)list.getPatient().getServiceNo();
						patient_name = (String) list.getPatient().getPatientName();
						String format = "dd-MM-yyyy";
						/*date = HMSUtil.convertDateToStringFormat((Date)list.getPatient().getDateOfBirth(), format);
						System.out.println("date is "+date);*/
						date =  (Date)list.getPatient().getDateOfBirth();						
						gender = (String)list.getPatient().getMasAdministrativeSex().getAdministrativeSexName();
						rank = (String)list.getPatient().getMasRank().getRankName();
						mobileNo =  list.getPatient().getMobileNumber().toString();
						referredHospital = (String) list.getMasImpanneledHospital().getImpanneledHospitalName();		
						referredDate = HMSUtil.convertDateToStringFormat((Date) list.getReferralIniDate(), format);
						System.out.println("date is "+referredDate);
						//referredDate = (Date) list.getReferralIniDate();
						id = list.getId()+"";
						
								}
					jsonData.put("id", id);
					jsonData.put("service_no", service_no);
					jsonData.put("patient_name", patient_name);
					if(date == null) {
						jsonData.put("age", "");
					}else {
						Period p = ProjectUtils.getDOB(date);
						jsonData.put("age", p.getYears());
						
					}
					jsonData.put("gender",gender);
					jsonData.put("rank", rank);
					jsonData.put("mobile_no", mobileNo);
					jsonData.put("referred_hospital", referredHospital);
					jsonData.put("referral_date", referredDate);
					/*if(referredDate == null) {
						jsonData.put("referral_date", referredDate);
					}else {
						jsonData.put("referral_date", referredDate);
					}*/
										
					headerList.add(jsonData);
				}
				obj.put("Status", "0");
				obj.put("msg", "Referral List got successfull");
				obj.put("referral_list", headerList);
				obj.put("count", map.get("count"));
			}
		}else {
			obj.put("status", "0");
			obj.put("msg", "No Record Found");
		}
		return obj.toString();
	}
	@Override
	public String referredPatientDetail(HashMap<String, String> jsondata, HttpServletRequest request, HttpServletResponse response) {
		Map<String, Object> map = od.referredPatientDetail(jsondata);
		JSONObject obj = new JSONObject();
		List<Map<String, Object>> headerList = new ArrayList<>();
		List<Map<String, Object>> detailList = new ArrayList<>();
		if (!map.isEmpty()) {
			List<ReferralPatientHd> headerInfo = (List<ReferralPatientHd>) map.get("referredHeaderList");
			List<ReferralPatientDt> detailInfo = (List<ReferralPatientDt>) map.get("referredDetailList");

			if (headerInfo.size() > 0) {
				for (ReferralPatientHd list : headerInfo) {
					Map<String, Object> jsonData = new HashMap<>();
					String service_no = "", patient_name = "", gender = "", rank = "", mobileNo = "", patientId="";
					Date date = null;
					if (list.getPatient() != null) {
						service_no = (String) list.getPatient().getServiceNo();
						patientId = list.getPatient().getPatientId()+"";
						patient_name = (String) list.getPatient().getPatientName();
						date = (Date) list.getPatient().getDateOfBirth();
						gender = (String) list.getPatient().getMasAdministrativeSex().getAdministrativeSexName();
						rank = (String) list.getPatient().getMasRank().getRankName();
						mobileNo = list.getPatient().getMobileNumber().toString();

					}
					jsonData.put("id", list.getId());
					jsonData.put("service_no", service_no);
					jsonData.put("patient_id", patientId);
					jsonData.put("patient_name", patient_name);
					if (date == null) {
						jsonData.put("age", "");
					} else {
						Period p = ProjectUtils.getDOB(date);
						jsonData.put("age", p.getYears());
					}
					jsonData.put("gender", gender);
					jsonData.put("rank", rank);
					jsonData.put("mobile_no", mobileNo);
					headerList.add(jsonData);
				}

				obj.put("header_list", headerList);
			} else {
				obj.put("header_list", new JSONArray());
			}

			if (detailInfo.size() > 0) {
				for(ReferralPatientDt referralPatientDt :detailInfo) {
					Map<String,Object> map2 = new HashMap<>();
					String hospitalName = "", diagnosisName="";
					if(referralPatientDt.getReferralPatientHd() != null) {
						hospitalName = referralPatientDt.getReferralPatientHd().getMasImpanneledHospital().getImpanneledHospitalName();
					}	
					map2.put("id", referralPatientDt.getId());
					map2.put("hospital_name", hospitalName);
					System.out.println("final_note "+referralPatientDt.getFinalNote());
					map2.put("final_note", referralPatientDt.getFinalNote());
					map2.put("department_name", referralPatientDt.getExtDepartment());
					if(referralPatientDt.getMasIcd() != null) {
						diagnosisName = referralPatientDt.getMasIcd().getIcdName();
					}
					map2.put("diagnosis_name", diagnosisName);					
					System.out.println("referralPatientDt.getReferralDate() "+referralPatientDt.getReferralDate());
					map2.put("referral_date", referralPatientDt.getReferralDate());
					map2.put("notifiable_desease", referralPatientDt.getDisease());
					map2.put("instructions", referralPatientDt.getInstruction());
					map2.put("mark_mb", referralPatientDt.getMb());
					map2.put("mark_admitted", referralPatientDt.getAdmitted());
					map2.put("close", referralPatientDt.getClose());
					
					detailList.add(map2);					
					
				}
				obj.put("detail_list", detailList);
			} else {
				obj.put("detail_list", new JSONArray());
			}

		} else {
			obj.put("headerList", new JSONArray());
			obj.put("DetailList", new JSONArray());
		}
		return obj.toString();
	}
	@Override
	public String updateReferralDetail(HashMap<String, Object> jsondata, HttpServletRequest request,HttpServletResponse response) {
		Map<String, Object> responseJson = od.updateReferralDetail(jsondata, request, response);
		JSONObject obj = new JSONObject();
		if(!responseJson.isEmpty()) {
			obj.put("msg", responseJson.get("msg"));
			obj.put("status", "1");			
		}else {
			obj.put("msg", "Failed to Update Records");
			obj.put("status", "0");
		}
		return obj.toString();
	}
	@Override
	public String getAdmissionDischargeList(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response){
		JSONObject obj = new JSONObject();
		JSONArray jsArray = new JSONArray();
		Map<String,Object> jsonResponse = od.getAdmissionDischargeList(jsondata, request, response);
		if(!jsonResponse.isEmpty()) {
			Map<String,Object> mapData = new HashMap<>();
			List<Map<String,Object>> responseList = new ArrayList<>();
			List<Map<String,Object>> responseList2 = new ArrayList<>();
			List<AdmissionDischarge> admissionPendingList = (List<AdmissionDischarge>)jsonResponse.get("admissionPendingList");
			String admissionPendingListCount = (String)jsonResponse.get("count1");
			List<AdmissionDischarge> dischargePendingList = (List<AdmissionDischarge>)jsonResponse.get("dischargePendingList");
			String dischargePendingListCount = (String) jsonResponse.get("count2");
			if(admissionPendingList.size() > 0) {
				for(AdmissionDischarge referralPatientDt : admissionPendingList) {
					Map<String,Object> map = new HashMap<>();
					String serviceNo = "",patientName="",age="",gender="",rank="",mobileNo="",name="",relation="",hospitalName="";
					Date dob = null;
					if(referralPatientDt.getReferralPatientHd() != null && referralPatientDt.getReferralPatientHd().getPatient() != null) {
						serviceNo = referralPatientDt.getReferralPatientHd().getPatient().getServiceNo();
						patientName = referralPatientDt.getReferralPatientHd().getPatient().getPatientName();
						dob = referralPatientDt.getReferralPatientHd().getPatient().getDateOfBirth();
						mobileNo = referralPatientDt.getReferralPatientHd().getPatient().getMobileNumber();
						if(referralPatientDt.getReferralPatientHd().getPatient().getMasAdministrativeSex() != null) {
							gender= referralPatientDt.getReferralPatientHd().getPatient().getMasAdministrativeSex().getAdministrativeSexName();
						}
						
					}
					if(referralPatientDt.getReferralPatientHd() != null && referralPatientDt.getReferralPatientHd().getPatient() != null && referralPatientDt.getReferralPatientHd().getPatient().getMasRank() != null) {
						rank = referralPatientDt.getReferralPatientHd().getPatient().getMasRank().getRankName();
					}
						if(referralPatientDt.getReferralPatientHd() != null && referralPatientDt.getReferralPatientHd().getMasImpanneledHospital() != null) {
						hospitalName = referralPatientDt.getReferralPatientHd().getMasImpanneledHospital().getImpanneledHospitalName();
					}
					map.put("id", referralPatientDt.getAdmissionId());
					map.put("service_no", serviceNo);
					map.put("patient_name", patientName);
					//Period period = ProjectUtils.getDOB(dob);
					if (dob == null) {
						map.put("age", "");
					} else {
						Period period = ProjectUtils.getDOB(dob);
						map.put("age", period.getYears());
					}					
					map.put("gender", gender);
					map.put("rank", rank);
					map.put("mobile_no", mobileNo);
					map.put("hospital_name", hospitalName);
					//map.put("count", admissionPendingListCount);
					responseList.add(map);
				}
				
				obj.put("admissionPendingList", responseList); 
				obj.put("count", admissionPendingListCount);
			}else {
				obj.put("admissionPendingList", new JSONArray());
			}
			
			if(dischargePendingList.size()>0) {
				for(AdmissionDischarge admissionDischarge : dischargePendingList) {
					Map<String,Object> map2 = new HashMap<>();
					String serviceNo="",patientName="",gender="",rank="",ward="",disposal="";
					Date age= null, dateOfAdmission = null;
					if(admissionDischarge.getPatient() != null){
						serviceNo = admissionDischarge.getPatient().getServiceNo();
						patientName = admissionDischarge.getPatient().getPatientName();
						age = admissionDischarge.getPatient().getDateOfBirth();
						if(admissionDischarge.getPatient().getMasAdministrativeSex() != null) {
							gender = admissionDischarge.getPatient().getMasAdministrativeSex().getAdministrativeSexName();
						}
						if(admissionDischarge.getPatient().getMasRank() != null) {
							rank = admissionDischarge.getPatient().getMasRank().getRankName();
						}	
						
					}
					if(admissionDischarge.getWardNo() != null) {
						ward = admissionDischarge.getWardNo().toString();
					}
					
					dateOfAdmission = admissionDischarge.getDateOfAdmission();
					if(admissionDischarge.getMasDisposal() != null) {
						disposal = admissionDischarge.getMasDisposal().getDisposalName();
					}
					String admissionDate = HMSUtil.convertDateToStringFormat(dateOfAdmission, "dd-MM-yyyy");
					Period period = ProjectUtils.getDOB(age);
					map2.put("id", admissionDischarge.getAdmissionId());
					map2.put("service_no", serviceNo);
					map2.put("patient_name", patientName);
					map2.put("age", period.getYears());
					map2.put("gender", gender);
					map2.put("rank", rank);
					map2.put("date_of_admission", dateOfAdmission);
					map2.put("ward", ward);
					map2.put("disposal", disposal);
					//map2.put("count", dischargePendingListCount);
					responseList2.add(map2);
				}
				obj.put("dischargePendingList",responseList2);
				obj.put("count",dischargePendingListCount);
			}else {
				obj.put("dischargePendingList", new JSONArray());
			}
		}else {
			obj.put("admissionPendingList", new JSONArray());
			obj.put("dischargePendingList", new JSONArray());
		}
		return obj.toString();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public String admissionAndDischarge(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		JSONObject obj = new JSONObject();
		List<Map<String,Object>> jsonList = new ArrayList<>();
		Map<String, Object> jsonResponse = od.admissionAndDischarge(jsondata, request, response);
		if(!jsonResponse.isEmpty()) {
			List<AdmissionDischarge> list = (List<AdmissionDischarge>) jsonResponse.get("patientDetail");
			List<MasDisposal> disposalList = (List<MasDisposal>) jsonResponse.get("disposalList");
			if(list.size() >0) {
				String admission_id = "",dateOfAdmission = "",ward ="", disposal="", noOfDays="",remark="", admissionNo="", headerId="",patientId="", serviceNo="", patientName="",gender="", age="", rank="", mobileNo="",referralDate = "", hospitalName="",speciality="",diagnosis="", insturctions="";
				
				for(AdmissionDischarge admissionDischarge : list) {
					Map<String,Object> map = new HashMap<>();
					admission_id = admissionDischarge.getAdmissionId()+"";
					if(admissionDischarge.getDateOfAdmission() != null) {
						dateOfAdmission = HMSUtil.convertDateToStringFormat(admissionDischarge.getDateOfAdmission(),"dd-MM-yyyy");
					}
					
					if(admissionDischarge.getWardNo() != null) {
						ward = admissionDischarge.getWardNo()+"";
					}
					
					if(admissionDischarge.getMasDisposal() != null && admissionDischarge.getMasDisposal().getDisposalName() != null) {
						disposal = admissionDischarge.getMasDisposal().getDisposalName();
					}
					
					if(admissionDischarge.getNoOfDays() != null) {
						noOfDays = admissionDischarge.getNoOfDays()+"";
					}
					
					if(admissionDischarge.getRemarks() != null) {
						remark = admissionDischarge.getRemarks();
					}
					
					if(admissionDischarge.getDateOfAdmission() != null) {
						admissionNo = admissionDischarge.getAdmissionNo();
					}
					if(admissionDischarge.getReferralPatientHd() != null) {
						headerId = admissionDischarge.getReferralPatientHd().getId()+"";
					}					
					//speciality = admissionDischarge.getReferralPatientHd().getReferralPatientDts();
					if(admissionDischarge.getReferralPatientHd() != null) {
						for(ReferralPatientDt referralPatientDt : admissionDischarge.getReferralPatientHd().getReferralPatientDts()) {
							speciality += referralPatientDt.getExtDepartment()+",";
							diagnosis += referralPatientDt.getMasIcd().getIcdName()+",";
							insturctions = referralPatientDt.getInstruction()+",";
							
						}
						speciality = speciality.substring(0, speciality.length()-1);
						diagnosis = diagnosis.substring(0, diagnosis.length()-1);
						insturctions = insturctions.substring(0, insturctions.length()-1);
					}					
					
					if(admissionDischarge.getReferralPatientHd() != null) {
						referralDate = HMSUtil.convertDateToStringFormat(admissionDischarge.getReferralPatientHd().getReferralPatientDts().get(0).getReferralDate(),"dd-MM-yyyy");
					}
					
							
					//if (admissionDischarge.getReferralPatientHd() != null) {
					//	if (admissionDischarge.getReferralPatientHd().getPatient() != null) {
					if(admissionDischarge.getPatient() != null) {
							patientId = admissionDischarge.getPatient().getPatientId() + "";
							serviceNo = admissionDischarge.getPatient().getServiceNo();
							patientName = admissionDischarge.getPatient().getPatientName();
							if (admissionDischarge.getPatient()
									.getMasAdministrativeSex() != null) {
								gender = admissionDischarge.getPatient()
										.getMasAdministrativeSex().getAdministrativeSexName();
							}
							if (admissionDischarge.getPatient().getMasRank() != null) {
								rank = admissionDischarge.getPatient().getMasRank()
										.getRankName();
							}
							mobileNo = admissionDischarge.getPatient().getMobileNumber();
							age = HMSUtil.convertDateToStringFormat(
									admissionDischarge.getPatient().getDateOfBirth(),
									"dd-MM-yyyy");
					}
					//	}
					//}
					if(admissionDischarge.getReferralPatientHd() != null && admissionDischarge.getReferralPatientHd().getMasImpanneledHospital() != null) {
						hospitalName = admissionDischarge.getReferralPatientHd().getMasImpanneledHospital().getImpanneledHospitalName();
					}
					
					map.put("admission_id", admission_id);
					map.put("patient_id", patientId);
					map.put("header_id", headerId);
					map.put("service_no", serviceNo);
					map.put("patient_name", patientName);
					map.put("age", age);
					map.put("gender", gender);
					map.put("rank", rank);
					map.put("mobile_no", mobileNo);
					map.put("referral_date", referralDate);
					map.put("hospital_name", hospitalName);
					map.put("speciality", speciality);
					map.put("diagnosis", diagnosis);
					map.put("instructions", insturctions);
					map.put("admission_date", dateOfAdmission);
					map.put("ward", ward);
					map.put("disposal", disposal);
					map.put("no_of_days", noOfDays);
					map.put("admission_no", admissionNo);
					map.put("remarks", remark);
					jsonList.add(map);
					
				}
				//obj.put("status","1");
				obj.put("referralList", jsonList);
			}else {
				//obj.put("status","0");
				obj.put("referralList", new JSONArray());
			}
			
			if(disposalList.size()>0) {
				List<Map<String,Object>> masDisposalsList = new ArrayList<>();
				for(MasDisposal masDisposal : disposalList) {
					Map<String,Object> map2 = new HashMap<>();
					String disposalId = masDisposal.getDisposalId()+"";
					String disposalName = masDisposal.getDisposalName();
					map2.put("id", disposalId);
					map2.put("disposal_name", disposalName);
					masDisposalsList.add(map2);
				}
				obj.put("disposalList", masDisposalsList);
				
			}else {
				obj.put("disposalList", new JSONArray());
			}
		}else {
			obj.put("referralList", new JSONArray());
			obj.put("disposalList", new JSONArray());
		}
		
		
		return obj.toString();
	}
	@Override
	public String savePatientAdmission(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		String result = od.savePatientAdmission(jsondata, request, response);
		JSONObject obj = new JSONObject();
		obj.put("msg", result);
		return obj.toString();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public String getServiceWisePatientList(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		Map<String,Object> map = od.getServiceWisePatientList(jsondata, request, response);
		JSONObject obj = new JSONObject();
		if(!map.isEmpty()) {
			List<Patient> patientList = (List<Patient>)map.get("patientList");
			List<MasDisposal> disposalList = (List<MasDisposal>)map.get("disposalList");
			if(patientList.size() >0) {
				List<Map<String, String>> list1 = new ArrayList<>();
				for(Patient patient : patientList) {
					Map<String, String> patientMap = new HashMap<>();
					patientMap.put("patient_id", patient.getPatientId()+"");
					patientMap.put("patient_name", patient.getPatientName());
					patientMap.put("service_no", patient.getServiceNo());
					Period p = ProjectUtils.getDOB(patient.getDateOfBirth());
					patientMap.put("age", p.getYears()+"");
					if(patient.getMasAdministrativeSex() != null) {
						patientMap.put("gender", patient.getMasAdministrativeSex().getAdministrativeSexName());
					}
					if(patient.getMasRank() != null) {
						patientMap.put("rank", patient.getMasRank().getRankName());
					}
					patientMap.put("mobile_no", patient.getMobileNumber());
					String name = "";
					if(patient.getMasEmployee() != null) {
						String firstName="", middleName="",lastName="";
						if(patient.getMasEmployee().getFirstName() != null) {
							name += patient.getMasEmployee().getFirstName()+" ";
						}
						if(patient.getMasEmployee().getMiddleName() != null) {
							name += patient.getMasEmployee().getMiddleName()+" ";
						}
						if(patient.getMasEmployee().getLastName() != null) {
							name += patient.getMasEmployee().getLastName();
						}
						String relation = "";
						if(patient.getMasEmployee().getMasRelation() != null) { 
							relation = patientMap.put("relation", patient.getMasEmployee().getMasRelation().getRelationName());
						}
						patientMap.put("relation", relation);
					}					
					patientMap.put("emp_name", name);					
					list1.add(patientMap);					
				}
				obj.put("patient_list", list1);
			}else {
				obj.put("patient_list", new JSONArray());
			}
			if(disposalList.size() > 0) {
				List<Map<String, String>> list2 = new ArrayList<>();
				for(MasDisposal masDisposal : disposalList) {
					Map<String, String> disposalMap = new HashMap<>();
					String disposalId = masDisposal.getDisposalId()+"";
					String disposalName = masDisposal.getDisposalName();
					disposalMap.put("id", disposalId);
					disposalMap.put("disposal_name", disposalName);
					list2.add(disposalMap);
				}
				obj.put("disposal_list", list2);
			}else {
				obj.put("disposal_list", new JSONArray());
			}
			
		}else {
			obj.put("disposal_list", new JSONArray());
			obj.put("patient_list", new JSONArray());
		}
		return obj.toString();
		
	}
	
	public String saveNewAdmission(HashMap<String, String> jsondata, HttpServletRequest request,HttpServletResponse response) {
		String result = od.saveNewAdmission(jsondata, request, response);
		JSONObject obj = new JSONObject();
		obj.put("msg", result);
		return obj.toString();
	}
	

}








