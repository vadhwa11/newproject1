package com.icg.jkt.dao.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.LongStream;

import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.icg.jkt.dao.PatientRegistrationDao;
import com.icg.jkt.entity.MasEmployee;
import com.icg.jkt.entity.MasEmployeeDependent;
import com.icg.jkt.entity.Patient;
import com.icg.jkt.hibernateutils.GetHibernateUtils;
import com.icg.jkt.utils.HMSUtil;


@Repository
@Transactional
public class PatientRegistrationDaoImpl implements PatientRegistrationDao{

	@Autowired
	GetHibernateUtils getHibernateUtils;
	


	@SuppressWarnings({ "unchecked"})
	@Override
	public Map<String,Object> findPatientAndDependentFromEmployee(String serviceNo) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		List<MasEmployee> employeeList = new ArrayList<MasEmployee>();
		List<Patient> patientList = new ArrayList<Patient>();
		List<MasEmployeeDependent> employeeDependentList = new ArrayList<MasEmployeeDependent>();
		
		long selfRelationId= Long.parseLong(HMSUtil.getProperties("adt.properties","SELF_RELATION_ID"));
		
		
		Session session = getHibernateUtils.getHibernateUtlis().OpenSession();

		int i=0;
		patientList = session.createCriteria(Patient.class)
						.add(Restrictions.eq("serviceNo",serviceNo))
						.add(Restrictions.isNotNull("uhidNo")).list();
		
		
		if(patientList.size()>0 && !patientList.isEmpty()) {
			
			Long []relationArray = new Long [patientList.size()];
			for(Patient patient:patientList) {
				relationArray[i] = patient.getMasRelation().getRelationId();
				i++;
			}
			
			boolean contains = Arrays.stream(relationArray).anyMatch(x -> x ==selfRelationId);
			long employeeId = patientList.get(0).getMasEmployee().getEmployeeId();
			
			if(contains)  { //true
				employeeDependentList = session.createCriteria(MasEmployeeDependent.class)
						.add(Restrictions.eq("masEmployee.employeeId", employeeId))
						.add(Restrictions.not(Restrictions.in("masRelation.relationId", relationArray)))
						.list();
			}else { // false
				
				employeeList = session.createCriteria(MasEmployee.class)
						.add(Restrictions.eq("serviceNo",serviceNo))
						.add(Restrictions.eq("status","y"))
						.list();
				employeeDependentList = session.createCriteria(MasEmployeeDependent.class)
						.add(Restrictions.eq("masEmployee.employeeId", employeeId))
						.add(Restrictions.not(Restrictions.in("masRelation.relationId", relationArray)))
						.list();
			}
			
		}
		else {
			employeeList = session.createCriteria(MasEmployee.class)
			.add(Restrictions.eq("serviceNo",serviceNo))
			.add(Restrictions.eq("status","y"))
			.list();
			
			
		}
		
		
		
		
		
		map.put("patientList", patientList);
		map.put("employeeList", employeeList);
		map.put("employeeDependentList", employeeDependentList);
		
		return map ;
	}


	

}
